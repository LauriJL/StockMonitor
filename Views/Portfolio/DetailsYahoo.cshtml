@model StockMonitor_2.Models.Portfolio

<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>
<body>
    @*Company data*@
    <div>
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-4">
                    <h2><span id='companyName'></span></h2>
                    <h4>(@Html.DisplayFor(model => model.Yritys))</h4>
                    <p>Data retrieved from Yahoo Finance API.</p>
                </div>
                <div class="col-sm-4" style="border-left:solid 1px">
                    <br />
                    @*<dt style="font-size:medium;font-weight:bold">Maa</dt>
                        <dd><span id='country' style="font-size:medium"></span></dd>*@
                    <dt style="font-size:medium;font-weight:bold">Valuutta</dt>
                    <dd><span id='currency' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Pörssi</dt>
                    <dd><span id='exchange' style="font-size:medium"></span></dd>
                    @*<dt style="font-size:medium;font-weight:bold">Toimiala</dt>
                        <dd><span id='sector' style="font-size:medium"></span></dd>*@
                </div>
            </div>

        </dl>
    </div>

    @*Financial data*@
    <div>
        <hr />
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Kurssi nyt</dt>
                    <dd style="font-size:medium;"><span id='currentPrice' style="font-weight:bold;color:green"></span></dd>
                    <dt style="font-size:medium;">Avaus</dt>
                    <dd style="font-size:medium;"><span id='openingPrice'></span></dd>
                    <dt style="font-size:medium;">Ylin</dt>
                    <dd style="font-size:medium;"><span id='highPrice'></span></dd>
                    <dt style="font-size:medium;">Alin</dt>
                    <dd style="font-size:medium;"><span id='lowPrice'></span></dd>
                    <dt style="font-size:medium;">Vaihto (määrä)</dt>
                    <dd style="font-size:medium;"><span id='volume'></span></dd>
                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Edellinen päätös</dt>
                    <dd style="font-size:medium;"><span id='previousClose'></span></dd>
                    <dt style="font-size:medium;">Muutos</dt>
                    <dd style="font-size:medium;"><span id='change'></span></dd>
                    <dt style="font-size:medium;">Muutos %</dt>
                    <dd style="font-size:medium;"><span id='changepercent'></span></dd>

                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;font-weight:bold">P/E</dt>
                    <dd><span id='pe' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">PEG</dt>
                    <dd><span id='peg' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/S</dt>
                    <dd><span id='ps' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/B</dt>
                    <dd><span id='pb' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Osinko per osake</dt>
                    <dd><span id='dividend' style="font-size:medium"></span></dd>
                    @*<dt style="font-size:medium;font-weight:bold">EPS</dt>
                        <dd><span id='eps' style="font-size:medium"></span></dd>*@
                </div>
            </div>
        </dl>
        <hr />
    </div>

    @*Charts*@
    <div class="col-sm-12">
        <ul class="nav nav-pills">
            <li class="active"><a data-toggle="tab" href="#5days">Viikko</a></li>
            <li><a data-toggle="tab" href="#1month">Kuukausi</a></li>
            <li><a data-toggle="tab" href="#6months">6 kuukautta</a></li>
            <li><a data-toggle="tab" href="#1year">1 vuosi</a></li>
            <li><a data-toggle="tab" href="#5years">5 vuotta</a></li>
            <li><a data-toggle="tab" href="#10years">10 vuotta</a></li>
        </ul>
    </div>
    <div class="tab-content">
        <div id="5days" class="tab-pane fade in active">
            <br />
            <br />
            <h3>Viikko</h3>
            <div class="col-sm-11">
                <canvas id="chart5days" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1month" class="tab-pane fade">
            <br />
            <br />
            <h3>Kuukausi</h3>
            <div class="col-sm-11">
                <canvas id="chart1month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="6months" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 6 kuukautta</h3>
            <div class="col-sm-11">
                <canvas id="chart6months" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1year" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeisin vuosi</h3>
            <div class="col-sm-11">
                <canvas id="chart1year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="5years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 5 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart5year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="10years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 10 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart10year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
    </div>

    <div class="col-sm-12">
        <br />
        <p>
            <a class="btn btn-info" @Html.ActionLink("Takaisin", "IndexYahoo")
        </p>
    </div>
</body>
</html>

<script>

//Get JSON data from rapidapi/yahoo-finance

    var companyName = "";
    //var country = "";
    var currency = "";
    var exchange = "";
    //var sector = "";
    var currentPrice = "";
    var openingPrice = "";
    var highPrice = "";
    var lowPrice = "";
    var volume = "";
    var previousClose = "";
    var change = "";
    var changepercent = "";
    var pe = "";
    var peg = "";
    var ps = "";
    var pb = "";
    var dividend = "";
    //var eps = "";

    async function getDailyData() {
        // Storing response
        const response = await fetch("https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?symbols=" + '@Html.DisplayFor(model => model.Yritys)' + '&region=US', {
        "method": "GET",
        "headers": {
            "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
            "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
            }
        });
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
        companyName = data["quoteResponse"]["result"][0]["longName"];
        //country = data["quoteResponse"]["result"][0]["region"];
        currency = data["quoteResponse"]["result"][0]["currency"];
        exchange = data["quoteResponse"]["result"][0]["fullExchangeName"];
        //sector = data["quoteResponse"]["result"][0]["fullExchangeName"];
        currentPrice = data["quoteResponse"]["result"][0]["regularMarketPrice"];
        openingPrice = data["quoteResponse"]["result"][0]["regularMarketOpen"];
        highPrice = data["quoteResponse"]["result"][0]["regularMarketDayHigh"];
        lowPrice = data["quoteResponse"]["result"][0]["regularMarketDayLow"];
        volume = data["quoteResponse"]["result"][0]["regularMarketVolume"];
        previousClose = data["quoteResponse"]["result"][0]["regularMarketPreviousClose"];
        change = data["quoteResponse"]["result"][0]["regularMarketChange"];
        changepercent = data["quoteResponse"]["result"][0]["regularMarketChangePercent"];
        pe = data["quoteResponse"]["result"][0]["trailingPE"];
        peg = data["quoteResponse"]["result"][0]["pegRatio"];
        ps = data["quoteResponse"]["result"][0]["priceToSales"];
        pb = data["quoteResponse"]["result"][0]["priceToBook"];
        dividend = data["quoteResponse"]["result"][0]["dividendsPerShare"];
        eps = data["quoteResponse"]["result"][0]["epsCurrentYear"];

        document.getElementById('companyName').textContent = companyName;
        //document.getElementById('country').textContent = country;
        document.getElementById('currency').textContent = currency;
        document.getElementById('exchange').textContent = exchange;
        document.getElementById('currentPrice').textContent = currentPrice;
        document.getElementById('openingPrice').textContent = openingPrice;
        document.getElementById('highPrice').textContent = highPrice;
        document.getElementById('lowPrice').textContent = lowPrice;
        document.getElementById('volume').textContent = volume;
        document.getElementById('previousClose').textContent = previousClose;
        document.getElementById('change').textContent = change;
        document.getElementById('changepercent').textContent = changepercent;
        document.getElementById('pe').textContent = pe;
        document.getElementById('peg').textContent = peg;
        document.getElementById('ps').textContent = ps;
        document.getElementById('pb').textContent = pb;
        document.getElementById('dividend').textContent = dividend;
        //document.getElementById('eps').textContent = eps;
    }
    getDailyData();

    //<--CHARTS -->
    var adjustedClose10y = [];
    var timeStamps10y = [];
    var timeStamps10yDates = [];
    var timeStamps10yString = [];

    //<--GET DATA ANDCREATE CHARTS-->
    async function createCharts() {
        // Storing response
        const response = await fetch("https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-charts?region=US&comparisons=%255EGDAXI%252C%255EFCHI&symbol=" + '@Html.DisplayFor(model => model.Yritys)' + "&interval=1d&range=10y", {
            "method": "GET",
            "headers": {
                "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
                "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
            }
        });
        // Storing data in JSON
        var data = await response.json();
        console.log(data);
        adjustedClose10y = data["chart"]["result"][0]["indicators"]["quote"][0]["close"];
        console.log(adjustedClose10y);
        timeStamps10y = data["chart"]["result"][0]["timestamp"];
        //console.log(timeStamps10y);

        //Convert timestamps to dates
        timeStamps10yDates = timeStamps10y.map(function (d) { return new Date(d * 1000) });
        timeStamps10yString = timeStamps10yDates.map(String);
        //console.log(timeStamps10yString);

        //<--START CHART FOR 1 WEEK -->
        //Offset dat by one week (7days)
        d1wk = new Date();
        d1wk.setDate(d1wk.getDate() - 7);
        //console.log(d1wk);

        //Retrieve last 7 days of data
        startDate1wk = d1wk;
        endDate1wk = Date.now();
        oneWeek = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate1wk && obj <= endDate1wk;
        });
        //console.log(oneWeek);

        //Get last items from prices corresponding to days   
        numberOfDays1wk = oneWeek.length;
        //console.log(numberOfDays1wk);

        //Get appropriate number of prices (xs1Week)
        let pricesList1Wk = [];
        pricesList1Wk = adjustedClose10y;
        xs1Week = pricesList1Wk.slice(Math.max(adjustedClose10y.length - numberOfDays1wk, 0));
        //console.log(xs1Week);

        //Dates with prices on chart (ys1Week)
        ys1Week = oneWeek;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys1Week);

        //Draw chart 1 WEEK
        function createChartWeek() {
            var ctx = document.getElementById('chart5days').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Week,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Week,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartWeek();
        //<--END CHART FOR 1 WEEK -->

        //<--START CHART FOR 1 MONTH -->
        //Offset dat by one month (30 days)
        d1mo = new Date();
        d1mo.setDate(d1mo.getDate() - 30);
        //console.log(d1mo);

        //Retrieve last 30 days of data
        startDate1mo = d1mo;
        endDate1mo = Date.now();
        oneMonth = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate1mo && obj <= endDate1mo;
        });
        //console.log(oneMonth);

        //Get last items from prices corresponding to days   
        numberOfDays1mo = oneMonth.length;
        //console.log(numberOfDays1mo);

        //Get appropriate number of prices (xs1Month)
        let pricesList1Mo = [];
        pricesList1Mo = adjustedClose10y;
        xs1Month = pricesList1Mo.slice(Math.max(adjustedClose10y.length - numberOfDays1mo, 0));
        //console.log(xs1Month);

        //Dates with prices on chart (ys1Month)
        ys1Month = oneMonth;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys1Week);

        //Draw chart 1 MONTH
        function createChart1Month() {
            var ctx = document.getElementById('chart1month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Month,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Month,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1Month();
        //<--END CHART FOR 1 MONTH -->

        //<--START CHART FOR 6 MONTHS -->
        //Offset dat by six months (180 days)
        d6mo = new Date();
        d6mo.setDate(d6mo.getDate() - 180);
        //console.log(d6mo);

        //Retrieve last 180 days of data
        startDate6mo = d6mo;
        endDate6mo = Date.now();
        sixMonths = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate6mo && obj <= endDate6mo;
        });
        //console.log(sixMonths);

        //Get last items from prices corresponding to days   
        numberOfDays6mo = sixMonths.length;
        //console.log(numberOfDays6mo);

        //Get appropriate number of prices (xs6Month)
        let pricesList6Mo = [];
        pricesList6Mo = adjustedClose10y;
        xs6Month = pricesList6Mo.slice(Math.max(adjustedClose10y.length - numberOfDays6mo, 0));
        //console.log(xs6Month);

        //Dates with prices on chart (ys6Month)
        ys6Month = sixMonths;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys6Month);

        //Draw chart 1 MONTH
        function createChart6Month() {
            var ctx = document.getElementById('chart6months').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs6Month,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys6Month,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart6Month();
        //<--END CHART FOR 6 MONTHS -->

        //<--START CHART FOR 1 YEAR -->
        //Offset dat by one year (365 days)
        d1yr = new Date();
        d1yr.setDate(d1yr.getDate() - 365);
        //console.log(d1yr);

        //Retrieve last 365 days of data
        startDate1yr = d1yr;
        endDate1yr = Date.now();
        oneYear = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate1yr && obj <= endDate1yr;
        });
        //console.log(oneYear);

        //Get last items from prices corresponding to days   
        numberOfDays1yr = oneYear.length;
        //console.log(numberOfDays1yr);

        //Get appropriate number of prices (xs1Year)
        let pricesList1Yr = [];
        pricesList1Yr = adjustedClose10y;
        xs1Year = pricesList1Yr.slice(Math.max(adjustedClose10y.length - numberOfDays1yr, 0));
        //console.log(xs1Year);

        //Dates with prices on chart (ys1Year)
        ys1Year = oneYear;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys1Year);

        //Draw chart 1 YEAR
        function createChart1Year() {
            var ctx = document.getElementById('chart1year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1Year();
        //<--END CHART FOR 1 YEAR -->

        //<--START CHART FOR 5 YEARS -->
        //Offset dat by one year (1825 days)
        d5yr = new Date();
        d5yr.setDate(d5yr.getDate() - 1825);
        //console.log(d5yr);

        //Retrieve last 1825 days of data
        startDate5yr = d5yr;
        endDate5yr = Date.now();
        fiveYears = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate5yr && obj <= endDate5yr;
        });
        //console.log(fiveYears);

        //Get last items from prices corresponding to days   
        numberOfDays5yr = fiveYears.length;
        //console.log(numberOfDays5yr);

        //Get appropriate number of prices (xs5Year)
        let pricesList5Yr = [];
        pricesList5Yr = adjustedClose10y;
        xs5Year = pricesList5Yr.slice(Math.max(adjustedClose10y.length - numberOfDays5yr, 0));
        //console.log(xs5Year);

        //Dates with prices on chart (ys5Year)
        ys5Year = fiveYears;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys5Year);

        //Draw chart 5 YEARS
        function createChart5Year() {
            var ctx = document.getElementById('chart5year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs5Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys5Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart5Year();
        //<--END CHART FOR 5 YEARS -->

        //<--START CHART FOR 10 YEARS -->

        //Draw chart 10 YEARS

       function createChart10Year() {
            var ctx = document.getElementById('chart10year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: adjustedClose10y,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: timeStamps10yDates,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    },
                }
            });
        }
        createChart10Year();
        //<--END CHART FOR 10 YEARS -->
    }
    createCharts();

  



</script>