@model PagedList.IPagedList<StockMonitor_2.Models.Portfolio>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Salkku";
}

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css"
      integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ"
      crossorigin="anonymous">
<br />
<h2>Salkku</h2>

<br />

@using (Html.BeginForm("Index", "Portfolio", FormMethod.Get, new { @class = "form-inline" }))
{
    <div class="input-group">
        <p>
            <input type="submit" value="Hae" class="form-control" style="background-color:lightgray;font-weight:bold" />
            @Html.TextBox("SearchString2", ViewBag.currentFilter1 as string, new { @class = "form-control" })
        </p>
    </div>
}

<br />
<table class="table" id="portfolio">
    <tr>
        <th>@Html.ActionLink("Yritys", "Index", new { sortOrder = ViewBag.YritysSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Osakkeiden määrä yhteensä", "Index", new { sortOrder = ViewBag.OsakkeetYhtSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Hankinta-arvo yhteensä", "Index", new { sortOrder = ViewBag.HankintaYhtSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>Osakkeen hinta nyt</th>
        <th>Omistuksen arvo nyt</th>
        <th>Voitto/tappio</th>
        <th>Voitto/tappio %</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
    <tr id="valuesrow">
        <td id="yritys">@Html.DisplayFor(modelItem => item.Yritys)</td>
        <td>@Html.DisplayFor(modelItem => item.MaaraYht)</td>
        <td>@Html.DisplayFor(modelItem => item.HankintaArvo)</td>
        <td id="priceNow"></td>
        <td id="totalValue"></td>
        <td id="differenceE"></td>
        <td id="differenceP"></td>
        @*<td><a class="btn btn-success" @Html.ActionLink("Tiedot", "Details", new { id = item.ID })</td>*@
        <td><a class="btn btn-default" style="border:none" title="Tiedot" href='~/Portfolio/Details/@item.ID'>
                <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-info-circle" fill="green" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="M8.93 6.588l-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588z" />
                    <circle cx="8" cy="4.5" r="1" />
                </svg></a></td>
    </tr>

    }
    <tr>
        <td></td>
        <td style="font-weight:bold">@Model.Sum(m => m.MaaraYht)</td>
        <td style="font-weight:bold">@Model.Sum(h => h.HankintaArvo)</td>
        <td></td>
        <td id="currentTotalValueSumOutput" style="font-weight:bold"></td>
        <td id="diffESumOutput" style="font-weight:bold"></td>
        <td id="diffPSumOutput" style="font-weight:bold"></td>
        <td></td>
    </tr>
    @*@{
            string num = @Model.Sum(v => v.VoittoTappioE).ToString().Replace(',', '.');
        }*@

</table>
@using System.Globalization
<p style="font-size:medium">Osakkeiden hintatiedot haettu Yahoo Finance palvelusta kello <b>@DateTime.Now.ToString("HH:mm:ss", CultureInfo.CreateSpecificCulture("fi-FI"))</b> (@DateTime.Today.ToString("D", CultureInfo.CreateSpecificCulture("fi-FI"))). 
    <button class="btn btn-default" style="border:none" title="Päivitä tiedot" onClick="window.location.reload();">
        <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-arrow-repeat" fill="green" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z" />
            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z" />
        </svg>
    </button>
</p>
<br />
Sivu @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter1 = ViewBag.currentFilter1 }))

<script type="text/javascript">
    //Get stock data from API(Yahoo Finance)
    //Get company symbols from table
    var table = document.getElementById('portfolio');
    var companyList = [];
    function getCompanies() {
        var targetTDs = table.querySelectorAll('tr > td:first-child');
        for (var i = 0; i < targetTDs.length; i++) {
            var td = targetTDs[i];
            companyList.push(td.innerHTML).toString();
        }
    }
    getCompanies();

    //Construct urls for fetching data from API (Yahoo Finance)
    var a = 'https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?symbols=';
    var b = "";
    var c = '&region=US';
    var urls = "";
    var urllist = [];
    function createUrls() {
        for (var i = 0; i < companyList.length; i++) {
            //List of company symbols in table
            b = companyList[i];
            //Construct urls with company symbols
            urls = a + b;
            //Create array of urls by pushing urls to 'urllist' array
            urllist.push(urls);
        }
    }
    createUrls();

    //Get stock quotes from API and insert these into the 'Osakkeen hinta nyt' column
    let quotelist = [];
    //Fetch data from url
    var jsonData = "";
    async function getPrices() {
        for (let l = 0; l < companyList.length-1; l++) {
            //Store response
            const response = await fetch(urllist[l], {
                "method": "GET",
                "headers": {
                    "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
                    "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
                }
            });
            //Store data in JSON
            const data = await response.json();

            //Add desctructured JSON data to quotelist array
            quotelist.push(data["quoteResponse"]["result"][0]["regularMarketPrice"].toFixed(2));
            // Insert company-specific quotes to 'Osakkeen hinta nyt' column
            let cells = document.querySelectorAll('table tr td:nth-child(4)');
            for (let i = 0; i < cells.length-1; ++i) {
                cells[i].innerHTML = quotelist[i];
            }
            //console.log(quotelist);
        }
        //Input values into Arvo Nyt, Voitto/Tappio(€) and Voitto/Tappio(%) cells
        getAll();
        currentTotalSum();
        currentDiffESum();
        currentDiffPSum();
    }
    getPrices();

    //Refresh prices and rates
    function refresh() {
        getPrices();
    }

    //Optional: Set interval for automatically retrieving quotes
    //setInterval(getPrices, 6000);

    //Set Omistuksen Arvo Nyt, Voitto/Tappio(€) and Voitto/Tappio(%)
    //var diffE = 0;
    function getAll() {
        for (var i = 1; i < table.rows.length-1; i++) {
            var targetRows = table.querySelectorAll('tr');
            for (var i = 0; i < targetRows.length-1; i++) {
                // Current Total
                var numberOfShares = table.querySelectorAll('tr > td:nth-child(2)')[+i];
                var currentPricePerShare = table.querySelectorAll('tr > td:nth-child(4)')[+i];
                let currentTotalValue = parseInt(numberOfShares.innerHTML) * parseFloat(currentPricePerShare.innerText);
                let currentTotalValueOutput = table.querySelectorAll('tr > td:nth-child(5)')[+i];
                currentTotalValueOutput.innerHTML = currentTotalValue.toFixed(2);
                let currentTotalValueSum = 0;
                currentTotalValueSum = currentTotalValueSum + parseFloat(table.rows[i].cells[4].innerText);;
                // Difference €
                var purchaseTotalValue = table.querySelectorAll('tr > td:nth-child(3)')[+i];
                let diffE = parseFloat(currentTotalValueOutput.innerText).toFixed(2) - parseFloat(purchaseTotalValue.innerText).toFixed(2);
                let diffEOutput = table.querySelectorAll('tr > td:nth-child(6)')[+i];
                diffEOutput.innerHTML = diffE.toFixed(2);
                // Difference %
                let diffP = 0;
                if (parseFloat(purchaseTotalValue.innerText) > parseFloat(currentTotalValueOutput.innerText)) {
                    diffP = (parseFloat(currentTotalValueOutput.innerText).toFixed(2) * 100) / parseFloat(purchaseTotalValue.innerText).toFixed(2) - 100;
                } else {
                    diffP = (((parseFloat(purchaseTotalValue.innerText).toFixed(2) * 100 / parseFloat(currentTotalValueOutput.innerText).toFixed(2)) - 100) * -1)
                }
                let diffPOutput = table.querySelectorAll('tr > td:nth-child(7)')[+i];
                diffPOutput.innerHTML = diffP.toFixed(2) + '%';
            }
        }
    }

    //Sum - Omistuksen arvo nyt
    var currentTotalValueSum = 0;
    function currentTotalSum() {
        for (var i = 1; i < table.rows.length-1; i++) {
            currentTotalValueSum += Number(parseFloat(table.rows[i].cells[4].innerHTML));
            document.getElementById('currentTotalValueSumOutput').innerHTML = currentTotalValueSum.toFixed(2);
        }
    }

    //Sum - Voitto/Tappio(€)
    var currentTotalDiffPSum = 0;
    var num = @Model.Sum(v => v.HankintaArvo).ToString().Replace(',', '.');
    var purchasePriceTotal = num;
    var currentTotalDiffESum = 0;
    var currentTotalDiffPSum = 0;
    var diffESum = 0;
    var diffPSum = 0;
    function currentDiffESum() {
        for (var i = 1; i < table.rows.length-1; i++) {
            currentTotalDiffESum =parseFloat(currentTotalValueSumOutput.innerText).toFixed(2) - purchasePriceTotal
            document.getElementById('diffESumOutput').innerHTML = currentTotalDiffESum.toFixed(2);
            diffESum = currentTotalDiffESum.toFixed(2);
            if (diffESum < 0)
                document.getElementById('diffESumOutput').style.color = 'red'
            else
                document.getElementById('diffESumOutput').style.color = 'green'
        }
    }

    //Sum - Voitto/Tappio(%)
    function currentDiffPSum() {
        if (parseFloat(purchasePriceTotal) < parseFloat(currentTotalValueSumOutput.innerText)) {
            currentTotalDiffPSum = (parseFloat(currentTotalValueSumOutput.innerText).toFixed(2) * 100) / parseFloat(purchasePriceTotal).toFixed(2)  - 100
            document.getElementById('diffPSumOutput').innerHTML = currentTotalDiffPSum.toFixed(2) + '%';
            //document.getElementById('diffESumOutput').style.color = 'red'
            diffPSum = currentTotalDiffPSum.toFixed(2);
        } else {
            currentTotalDiffPSum = (parseFloat(purchasePriceTotal).toFixed(2) * 100 / parseFloat(currentTotalValueSumOutput.innerText).toFixed(2) - 100) * -1;
            document.getElementById('diffPSumOutput').innerHTML = currentTotalDiffPSum.toFixed(2) + '%';
            //document.getElementById('diffPSumOutput').style.color = 'green'
            diffPSum = currentTotalDiffPSum.toFixed(2);
        }
        if (diffPSum < 0) {
            document.getElementById('diffPSumOutput').style.color = 'red'
        }
        else {
            document.getElementById('diffPSumOutput').style.color = 'green'
        }      
    }

</script>

