@model PagedList.IPagedList<StockMonitor_2.Models.Portfolio>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Salkku";
}

<h2>Salkku</h2>
<p>Data retrieved from Finnhub.io API.</p>

<br />

@using (Html.BeginForm("Index", "Portfolio", FormMethod.Get, new { @class = "form-inline" }))
{
    <div class="input-group">
        <p>
            <input type="submit" value="Hae" class="form-control" style="background-color:lightgray;font-weight:bold" />
            @Html.TextBox("SearchString2", ViewBag.currentFilter1 as string, new { @class = "form-control" })
        </p>
    </div>
}

<br />
<table class="table" id="portfolio">
    <tr>
        @*<th>Omistaja</th>*@
        <th>@Html.ActionLink("Yritys", "Index", new { sortOrder = ViewBag.YritysSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Osakkeiden määrä yhteensä", "Index", new { sortOrder = ViewBag.OsakkeetYhtSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Hankinta-arvo yhteensä", "Index", new { sortOrder = ViewBag.HankintaYhtSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Osakkeen hinta nyt", "Index", new { sortOrder = ViewBag.OsakeNytSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Omistuksen arvo nyt", "Index", new { sortOrder = ViewBag.OmistusNytSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Voitto/tappio (€)", "Index", new { sortOrder = ViewBag.VoittoTappioSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th>@Html.ActionLink("Voitto/tappio %", "Index", new { sortOrder = ViewBag.VoittoTappioProsSortParam, currentFilter1 = ViewBag.currentFilter1 })</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr class="showCompanyClass" data-companyid="@item.Yritys">
            @*<td>@Html.DisplayFor(modelItem => item.Kayttaja)</td>*@
            <td id="yritys">@Html.DisplayFor(modelItem => item.Yritys)</td>
            <td>@Html.DisplayFor(modelItem => item.MaaraYht)</td>
            <td>@Html.DisplayFor(modelItem => item.HankintaArvo)</td>
            @*<td input type="text" id="hintaNyt"></td>*@
            <td>@Html.DisplayFor(modelItem => item.aHintaNyt)</td>
            <td>@Html.DisplayFor(modelItem => item.ArvoNytAll)</td>
            <td>@Html.DisplayFor(modelItem => item.VoittoTappioE)</td>
            <td>@Html.DisplayFor(modelItem => item.VoittoTappio_)</td>
            <td><a class="btn btn-success" @Html.ActionLink("Tiedot", "Details", new { id = item.ID })</td>
        </tr>

    }
    <tr>
        <td></td>
        <td style="font-weight:bold">@Model.Sum(m => m.MaaraYht)</td>
        <td style="font-weight:bold">@Model.Sum(h => h.HankintaArvo)</td>
        <td></td>
        <td style="font-weight:bold">@Model.Sum(a => a.ArvoNytAll)</td>
        <td id="voittoTappio" style="font-weight:bold">@Model.Sum(v => v.VoittoTappioE)</td>
        <td></td>
    </tr>
    @{
        string num = @Model.Sum(v => v.VoittoTappioE).ToString().Replace(',', '.');
    }

</table>



<br />
Sivu @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount
@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter1 = ViewBag.currentFilter1 }))

<script type="text/javascript">
    //Get stock data from API(finnhub.io)
    //Get company symbols from table
    var table = document.getElementById('portfolio');
    var companyList = [];
    function getCompanies() {
        var targetTDs = table.querySelectorAll('tr > td:first-child');
        for (var i = 0; i < targetTDs.length; i++) {
            var td = targetTDs[i];
            companyList.push(td.innerHTML).toString();
            //KompanyList ei muodostukaan taulukon riveistä, vaan model+silmukasta
            //URL.muodostus
            //API + kutsu
            //Osakkeen arvon poiminta
            //Oman kontrollerin kutsu, jossa välitetään osakekoodi sekä arvo (tehdään niin monta kertaa kuin on osakkeita)
            //Joka kutsun yhteydessä oma kontrolleri päivittää kantaan parametrien perustella osakekohtaisen arvon
            //em. silmukan lopuksi partial view +tyyppinen kutsu, joka palauttaa datan ja html+taulukon aikaisemmin määritettyyn paikkaan sivulla
        }
    }
    getCompanies();

    //Construct urls for fetching data from API (finnhub.io)
    var a = 'https://finnhub.io/api/v1/quote?symbol=';
    var b = "";
    var c = '&token=btdnsi748v6p1d4q5pcg';
    var urls = "";
    var urllist = [];
    function createUrls() {
        for (var i = 0; i < companyList.length; i++) {
            //List of company symbols n table
            b = companyList[i];
            //Construct urls with company symbols
            urls = a + b + c;
            //Create array of urls by pushing urls to 'urllist' array
            urllist.push(urls);
        }
    }
    createUrls();

    //Get stock quotes from API and insert these into the 'Osakkeen hinta nyt' column
    let quotelist = [];
    //Fetch data from url
    async function getPrices() {
        for (let l = 0; l < urllist.length; l++) {
            //Store response
            const response = await fetch(urllist[l]);
            //Store data in JSON
            const data = await response.json();
            //Add desctructured JSON data to quotelist array
            quotelist.push(data.c);
            //console.log(quotelist);
            // Insert compnay-specific quotes to 'Osakkeen hinta nyt' column
            let cells = document.querySelectorAll('table tr td:nth-child(4)');
            for (let i = 0; i < cells.length-1; ++i) {
                cells[i].innerHTML = quotelist[i];
            }
        }
    }
    getPrices();

    //Optional: Set interval for automatically retrieving quotes
    //setInterval(getPrices, 6000);


    //Sum row styles column
    var arvoNytAllString = @Model.Sum(v => v.VoittoTappioE).ToString().Replace(',', '.');
    function changeColor() {
        var sum = arvoNytAllString;
        //console.log(arvoNytAllString);
        //console.log(sum);
        if (sum < 0)
            document.getElementById('voittoTappio').style.color = 'red'
        else
            document.getElementById('voittoTappio').style.color = 'green'
    }
    changeColor();


    //Testing timestamps
    var timeStamps = [1287408600, 1287495000, 1287581400, 1287667800, 1287754200, 1288013400, 1288099800, 1288186200, 1288272600, 1288359000, 1288618200, 1288704600, 1288791000, 1288877400, 1288963800, 1289226600, 1289313000, 1289399400, 1289485800, 1289572200, 1289831400, 1289917800, 1290004200, 1290090600, 1290177000, 1290436200, 1290522600, 1290609000, 1290695400, 1290781800, 1291041000, 1291127400, 1291213800, 1291300200, 1291386600, 1291645800, 1291732200, 1291818600, 1291905000, 1291991400, 1292250600, 1292337000, 1292423400, 1292509800, 1292596200, 1292855400, 1292941800, 1293028200, 1293114600, 1293460200, 1293546600, 1293633000, 1293719400, 1293805800, 1294065000, 1294151400, 1294237800, 1294324200, 1294410600, 1294669800, 1294756200, 1294842600, 1294929000, 1295015400, 1295274600, 1295361000, 1295447400, 1295533800, 1295620200, 1295879400, 1295965800, 1296052200, 1296138600, 1296225000, 1296484200, 1296570600, 1296657000, 1296743400, 1296829800, 1297089000, 1297175400, 1297261800, 1297348200, 1297434600, 1297693800, 1297780200, 1297866600, 1297953000, 1298039400, 1298298600, 1298385000, 1298471400, 1298557800, 1298644200, 1298903400, 1298989800, 1299076200, 1299162600, 1299249000, 1299508200]
    var timeStamps2 = [];
    timeStamps2 = timeStamps.map(String);

    //console.log(timeStamps2);

    var timeStampsDates = timeStamps2.map(function (d) { return new Date(d * 1000) });
    //console.log(timeStampsDates);

    timeStampsDates2 = [];
    timeStampsDates2 = timeStampsDates.map(String);
    console.log(timeStampsDates2);

    var timeStampsDates3 = [];
    var timeStampsDates4 = [];
    for (var i = 0; i < timeStampsDates2.length; i++) {
        timeStampsDates3 = timeStampsDates2[i].replace(/16:30:00/g, '');
    };
    console.log(timeStampsDates3);

    //for (var i = 0; i < timeStampsDates3.length; i++) {
    //    var timeStampsDates4 = timeStampsDates3[i].replace(/15:30:00/g, '');
    //};
    //console.log(timeStampsDates4);

    //var date = "Mon Oct 18 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time)";
    //function getFormattedDate(date) {
    //    let year = date.getFullYear();
    //    let month = (1 + date.getMonth()).toString().padStart(2, '0');
    //    let day = date.getDate().toString().padStart(2, '0');

    //    return month + '-' + day + '-' + year;
    //    console.log(date);
    //}
    //getFormattedDate();


    //Convert date format to yyyy-MM-dd
    //var timeStamps10yFormatted = new Date(timeStampsDates2);
    //timeStamps10yFormatted = [
    //    timeStampsDates2.getFullYear(),
    //    ('0' + (timeStampsDates2.getMonth() + 1)).slice(-2),
    //    ('0' + timeStampsDates2.getDate()).slice(-2)
    //].join('-');
    //console.log(timeStamps10yFormatted);

    //Testing date conversion
    //var datesRaw = [Mon Oct 18 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Tue Oct 19 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Wed Oct 20 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Thu Oct 21 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Fri Oct 22 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Mon Oct 25 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Tue Oct 26 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Wed Oct 27 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Thu Oct 28 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Fri Oct 29 2010 16: 30: 00 GMT + 0300(Eastern European Summer Time), Mon Nov 01 2010 15: 30: 00 GMT + 0200(Eastern European Standard Time), Tue Nov 02 2010 15: 30: 00 GMT + 0200(Eastern European Standard Time), Wed Nov 03 2010 15: 30: 00 GMT + 0200(Eastern European Standard Time), Thu Nov 04 2010 15: 30: 00 GMT + 0200(Eastern European Standard Time), Fri Nov 05 2010 15: 30: 00 GMT + 0200(Eastern European Standard Time), Mon Nov 08 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Tue Nov 09 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Wed Nov 10 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Thu Nov 11 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Fri Nov 12 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Mon Nov 15 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Tue Nov 16 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Wed Nov 17 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Thu Nov 18 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Fri Nov 19 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Mon Nov 22 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Tue Nov 23 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Wed Nov 24 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Thu Nov 25 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time), Fri Nov 26 2010 16: 30: 00 GMT + 0200(Eastern European Standard Time)]
    //var dates = [];
    //dates.push(datesRaw);
    //console.log(dates);

</script>

