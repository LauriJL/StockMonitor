@*@model IEnumerable<StockMonitor_2.Models.Portfolio>*@
@model PagedList.IPagedList<StockMonitor_2.Models.Portfolio>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Salkku";
}

<h2>Salkku</h2>

<br />

@foreach (var item in Model)
{
    <script>
    var Yritys = "";
    //URL.muodostus
        yritys = "@item.Yritys";
        console.log(yritys);
    var a = "https://finnhub.io/api/v1/quote?symbol=";
    var b = "";
    var c = "&token=btdnsi748v6p1d4q5pcg";
        var url = a + yritys + c;
        //console.log(url);

    async function getPrices()
    {
        let ahintaNyt = "";
        const response = await fetch(url);
        const data = await response.json();
        ahintaNyt = data.c;
        //console.log(data);
        console.log(ahintaNyt);
        document.getElementById('yritys').innerHTML = yritys;
        document.getElementById('price').innerHTML = ahintaNyt;
        }
        getPrices();
    </script>
}
<div class="form-group">
    <p id="yritys"></p>
    <p id="price"></p>
    <br />
</div>
    <div>
        @{
            Html.RenderPartial("_Index");
        }
    </div>


    Sivu @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter1 = ViewBag.currentFilter1 }))

    <script type="text/javascript">
        //Get stock data from API(finnhub.io)
        //Get company symbols from table
        var table = document.getElementById('portfolio');
        var companyList = [];
        var a = 'https://finnhub.io/api/v1/quote?symbol=';
        var b = "";
        var c = '&token=btdnsi748v6p1d4q5pcg';
        //var urls = "";
        async function getCompanies() {
            var targetTDs = table.querySelectorAll('tr > td:first-child');
            for (var i = 0; i < targetTDs.length; i++) {
                var td = targetTDs[i];
                companyList.push(td.innerHTML).toString();
                //KompanyList ei muodostukaan taulukon riveistä, vaan model+silmukasta
                //URL.muodostus
                b = companyList[i];
                //console.log(companyList);
                var url = "";
                url = a + b + c;
                //urllist.push(urls);
                //console.log(urllist);
                //API + kutsu
                let quote = "";
                const response = await fetch(url);
                //console.log(url);
                const data = await response.json();
                quote = data.c;

                //Osakkeen arvon poiminta
                //Oman kontrollerin kutsu, jossa välitetään osakekoodi sekä arvo (tehdään niin monta kertaa kuin on osakkeita)
                //Joka kutsun yhteydessä oma kontrolleri päivittää kantaan parametrien perustella osakekohtaisen arvon
                //em. silmukan lopuksi partial view +tyyppinen kutsu, joka palauttaa datan ja html+taulukon aikaisemmin määritettyyn paikkaan sivulla
            }
        }
        getCompanies();

        //Construct urls for fetching data from API (finnhub.io)
        var a = 'https://finnhub.io/api/v1/quote?symbol=';
        var b = "";
        var c = '&token=btdnsi748v6p1d4q5pcg';
        var urls = "";
        var urllist = [];
        function createUrls() {
            for (var i = 0; i < companyList.length; i++) {
                //List of company symbols n table
                b = companyList[i];
                //Construct urls with company symbols
                urls = a + b + c;
                //Create array of urls by pushing urls to 'urllist' array
                urllist.push(urls);
            }
        }
        //createUrls();

        //Get stock quotes from API and insert these into the 'Osakkeen hinta nyt' column
        let quotelist = [];
        //Fetch data from url
        async function getPrices() {
            for (let l = 0; l < urllist.length; l++) {
                //Store response
                const response = await fetch(urllist[l]);
                //Store data in JSON
                const data = await response.json();
                //Add desctructured JSON data to quotelist array
                quotelist.push(data.c);
                console.log(quotelist);
                // Insert compnay-specific quotes to 'Osakkeen hinta nyt' column
                let cells = document.querySelectorAll('table tr td:nth-child(4)');
                for (let i = 0; i < cells.length; ++i) {
                    cells[i].innerHTML = quotelist[i];
                }
            }
        }
        //getPrices();

        //Optional: Set interval for automatically retrieving quotes
        //setInterval(getPrices, 6000);


        //Sum row styles column
        var arvoNytAllString = @Model.Sum(v => v.VoittoTappioE).ToString().Replace(',', '.');
        function changeColor() {
            var sum = arvoNytAllString;
            //console.log(arvoNytAllString);
            //console.log(sum);
            if (sum < 0)
                document.getElementById('voittoTappio').style.color = 'red'
            else
                document.getElementById('voittoTappio').style.color = 'green'
        }
        changeColor();
    </script>

