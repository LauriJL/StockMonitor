@model StockMonitor_2.Models.Portfolio

<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>
<body>
    <br />
    <hr style="height:2px; width:100%;border:none;color:rgb(169,169,169);background-color:rgb(169,169,169);" />
    @*Company data*@
    <div>
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-5" style="border-right:solid 1px;margin-top:20px">

                    <h2><span id='companyName'></span></h2>
                    <h4>(@Html.DisplayFor(model => model.Yritys))</h4>
                </div>
                <div class="col-sm-4">
                    <br />
                    <br />
                    <dt style="font-size:medium;font-weight:bold">Valuutta</dt>
                    <dd><span id='currency' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Pörssi</dt>
                    <dd><span id='exchange' style="font-size:medium"></span></dd>
                </div>
            </div>

        </dl>
    </div>

    @*Financial data*@
    <div>
        <hr />
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-5" style="border-right:solid 1px">
                    <h2 style="font-weight:bold"><span id='currentPrice'></span></h2>
                    <p>
                        <button id='changestyle' style="cursor:none;width: 70px; border: solid 1px; border-radius: 5px;border-color:white; background-color:white;color:white;font-weight: bold"><span id='change'></span></button>
                        <button id='changepercentstyle' style="cursor:none;width:70px;border:solid 1px;border-radius:5px;border-color:white; background-color:white;color:white;font-weight:bold"><span id='changepercent'></span></button>
                    </p>
                    @using System.Globalization
                    <p style="font-size:medium">
                        Tiedot haettu Yahoo Finance palvelusta kello <b>@DateTime.Now.ToString("HH:mm:ss", CultureInfo.CreateSpecificCulture("fi-FI"))</b> (@DateTime.Today.ToString("D", CultureInfo.CreateSpecificCulture("fi-FI"))).
                        <button class="btn btn-default" style="border:none" title="Päivitä tiedot" onClick="window.location.reload();">
                            <svg width="2em" height="2em" viewBox="0 0 16 16" class="bi bi-arrow-repeat" fill="green" xmlns="http://www.w3.org/2000/svg">
                                <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z" />
                                <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z" />
                            </svg>
                        </button>
                    </p>
                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Avaus</dt>
                    <dd style="font-size:medium;"><span id='openingPrice'></span></dd>
                    <dt style="font-size:medium;">Ylin</dt>
                    <dd style="font-size:medium;"><span id='highPrice'></span></dd>
                    <dt style="font-size:medium;">Alin</dt>
                    <dd style="font-size:medium;"><span id='lowPrice'></span></dd>
                    <dt style="font-size:medium;">Vaihto (määrä)</dt>
                    <dd style="font-size:medium;"><span id='volume'></span></dd>
                    <dt style="font-size:medium;">Edellinen päätös</dt>
                    <dd style="font-size:medium;"><span id='previousClose'></span></dd>
                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;font-weight:bold" href="#" data-toggle="tooltip" title="Price per Earnings: Osakkeen hinta jaettuna osakekohtaisella tuloksella.">P/E</dt>
                    <dd><span id='pe' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold" href="#" data-toggle="tooltip" title="Price to Earnings to Growth: Osakkeen hinta suhteessa sen tuloskasvunopeuteen.">PEG</dt>
                    <dd><span id='peg' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold" href="#" data-toggle="tooltip" title="Price to Sales: Osakekannan markkina-arvon ja pörssiyhtiön kerryttämän liikevaihdon välisnen suhde.">P/S</dt>
                    <dd><span id='ps' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold" href="#" data-toggle="tooltip" title="Price to Book value: Yrityksen markkina-arvo suhteessa sen taseen omaan pääomaan.">P/B</dt>
                    <dd><span id='pb' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Osinko per osake</dt>
                    <dd><span id='dividend' style="font-size:medium"></span></dd>
                </div>
            </div>
        </dl>
        <hr />
    </div>

    @*Charts*@
    <div class="col-sm-12">
        <ul class="nav nav-pills">
            <li class="active"><a data-toggle="tab" href="#5days">Viikko</a></li>
            <li><a data-toggle="tab" href="#1month">Kuukausi</a></li>
            <li><a data-toggle="tab" href="#6months">6 kuukautta</a></li>
            <li><a data-toggle="tab" href="#1year">1 vuosi</a></li>
            <li><a data-toggle="tab" href="#5years">5 vuotta</a></li>
            <li><a data-toggle="tab" href="#10years">10 vuotta</a></li>
        </ul>
    </div>
    <div class="tab-content">
        <div id="5days" class="tab-pane fade in active">
            <br />
            <br />
            <h3>Viikko</h3>
            <div class="col-sm-11">
                <canvas id="chart5days" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1month" class="tab-pane fade">
            <br />
            <br />
            <h3>Kuukausi</h3>
            <div class="col-sm-11">
                <canvas id="chart1month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="6months" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 6 kuukautta</h3>
            <div class="col-sm-11">
                <canvas id="chart6months" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1year" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeisin vuosi</h3>
            <div class="col-sm-11">
                <canvas id="chart1year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="5years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 5 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart5year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="10years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 10 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart10year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
    </div>

    <div class="col-sm-12">
        <br />
        <p>
            @*<a class="btn btn-info" @Html.ActionLink("Takaisin", "Index")*@
            <a class="btn btn-default" style="border:none" title="Takaisin" href='~/Portfolio/Index/'>
                <svg width="3em" height="3em" viewBox="0 0 16 16" class="bi bi-arrow-left-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5z" />
                </svg>
            </a>
        </p>
    </div>
</body>
</html>

<script>

//Get JSON data from rapidapi/yahoo-finance

    var companyName = "";
    //var country = "";
    var currency = "";
    var exchange = "";
    //var sector = "";
    var currentPrice = "";
    var openingPrice = "";
    var highPrice = "";
    var lowPrice = "";
    var volume = "";
    var previousClose = "";
    var change = "";
    var changeFloat = 0;
    var changepercent = "";
    var pe = "";
    var peg = "";
    var ps = "";
    var pb = "";
    var dividend = "";
    //var eps = "";

    async function getDailyData() {
        // Storing response
        const response = await fetch("https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?symbols=" + '@Html.DisplayFor(model => model.Yritys)' + '&region=US', {
        "method": "GET",
        "headers": {
            "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
            "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
            }
        });
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
        //date = data["quoteResponse"]["result"][0]["postMarketTime"];
        companyName = data["quoteResponse"]["result"][0]["longName"];
        //country = data["quoteResponse"]["result"][0]["region"];
        currency = data["quoteResponse"]["result"][0]["currency"];
        exchange = data["quoteResponse"]["result"][0]["fullExchangeName"];
        //sector = data["quoteResponse"]["result"][0]["fullExchangeName"];
        currentPrice = data["quoteResponse"]["result"][0]["regularMarketPrice"];
        let currentPriceFloat = parseFloat(currentPrice).toFixed(2);
        openingPrice = data["quoteResponse"]["result"][0]["regularMarketOpen"];
        let openingPriceFloat = parseFloat(openingPrice).toFixed(2);
        highPrice = data["quoteResponse"]["result"][0]["regularMarketDayHigh"];
        let highPriceFloat = parseFloat(highPrice).toFixed(2);
        lowPrice = data["quoteResponse"]["result"][0]["regularMarketDayLow"];
        let lowPriceFloat = parseFloat(lowPrice).toFixed(2);
        volume = data["quoteResponse"]["result"][0]["regularMarketVolume"];
        previousClose = data["quoteResponse"]["result"][0]["regularMarketPreviousClose"];
        let previousCloseFloat = parseFloat(previousClose).toFixed(2);
        change = data["quoteResponse"]["result"][0]["regularMarketChange"];
        changeFloat = parseFloat(change).toFixed(2);
        changepercent = data["quoteResponse"]["result"][0]["regularMarketChangePercent"];
        let changepercentFloat = parseFloat(changepercent).toFixed(2);
        pe = data["quoteResponse"]["result"][0]["trailingPE"];
        let peFloat = parseFloat(pe).toFixed(2);
        peg = data["quoteResponse"]["result"][0]["pegRatio"];
        let pegFloat = parseFloat(peg).toFixed(2);
        ps = data["quoteResponse"]["result"][0]["priceToSales"];
        let psFloat = parseFloat(ps).toFixed(2);
        pb = data["quoteResponse"]["result"][0]["priceToBook"];
        let pbFloat = parseFloat(pb).toFixed(2);
        dividend = data["quoteResponse"]["result"][0]["dividendsPerShare"];
        let dividendFloat = parseFloat(dividend).toFixed(2);
        eps = data["quoteResponse"]["result"][0]["epsCurrentYear"];

        //Convert timestamp to date
        //var dateFormattedLong = new Date(date * 1000);
        //console.log(dateFormattedLong);
        //console.log(dateFormattedLong.getTimezoneOffset());
        //var dateFormattedShort = dateFormattedLong.toLocaleDateString();

        //document.getElementById('date').textContent = dateFormatted;
        document.getElementById('companyName').textContent = companyName;
        //document.getElementById('country').textContent = country;
        document.getElementById('currency').textContent = currency;
        document.getElementById('exchange').textContent = exchange;
        document.getElementById('currentPrice').textContent = currentPriceFloat;
        document.getElementById('openingPrice').textContent = openingPriceFloat;
        document.getElementById('highPrice').textContent = highPriceFloat;
        document.getElementById('lowPrice').textContent = lowPriceFloat;
        document.getElementById('volume').textContent = volume;
        document.getElementById('previousClose').textContent = previousCloseFloat;
        document.getElementById('change').textContent = changeFloat;
        document.getElementById('changepercent').textContent = changepercentFloat + "%";
        document.getElementById('pe').textContent = peFloat;
        document.getElementById('peg').textContent = pegFloat;
        document.getElementById('ps').textContent = psFloat;
        document.getElementById('pb').textContent = pbFloat;
        document.getElementById('dividend').textContent = dividendFloat;
        //document.getElementById('eps').textContent = eps;
        changeColor();
    }
    getDailyData();

    //Styles
    function changeColor() {
        if (changeFloat < 0) {
            document.getElementById('changepercentstyle').style.backgroundColor = 'rgba(183, 15, 15, 1)';
            document.getElementById('changepercentstyle').style.borderColor = 'rgba(183, 15, 15, 1)';
            document.getElementById('changestyle').style.backgroundColor = 'rgba(183, 15, 15, 1)';
            document.getElementById('changestyle').style.borderColor = 'rgba(183, 15, 15, 1)';
        }
        else {
            document.getElementById('changepercentstyle').style.backgroundColor = 'rgba(61, 142, 61, 1)';
            document.getElementById('changepercentstyle').style.borderColor = 'rgba(61, 142, 61, 1)';
            document.getElementById('changestyle').style.backgroundColor = 'rgba(61, 142, 61, 1)';
            document.getElementById('changestyle').style.borderColor = 'rgba(61, 142, 61, 1)';
        }
    }

    //<--CHARTS -->

    //<--GET DATA AND CREATE CHARTS-->
    //Charts for 1 week and 1 month
    var adjustedClose1mo = [];
    var timeStamps1mo = [];
    var timeStamps1moDates = [];
    var timeStamps1moDatesLocal = [];
    var timeStamps1moString = [];

    async function createCharts1() {
        // Storing response
        const response = await fetch("https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-charts?region=US&comparisons=%255EGDAXI%252C%255EFCHI&symbol=" + '@Html.DisplayFor(model => model.Yritys)' + "&interval=5m&range=1mo", {
            "method": "GET",
            "headers": {
                "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
                "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
            }
        });
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
        let adjustedClose1moRaw = data["chart"]["result"][0]["indicators"]["quote"][0]["close"];
        //console.log(adjustedClose1moRaw)

        //Prices to two-decimal format
        adjustedClose1mo = adjustedClose1moRaw.map(function (element) {
            if (element === null) {
                return element;
            } else {
                return Number(element.toFixed(2));
            }        
        });
        //console.log(adjustedClose1mo);

        timeStamps1mo = data["chart"]["result"][0]["timestamp"];
        //console.log(timeStamps1mo);

        //Convert timestamps to dates
        timeStamps1moDates = timeStamps1mo.map(function (d) { return new Date(d * 1000) });
        //timeStamps1moDates = timeStamps1mo.map(function (d) { return new Date(d * 1000).toLocaleTimeString() });

        //timeStamps1moString = timeStamps1moDatesLocal.map(String);
        //console.log(timeStamps1moString);

        //<--START CHART FOR 1 WEEK -->
        //Offset dat by one week (7days)
        d1wk = new Date();
        d1wk.setDate(d1wk.getDate() - 7);
        //console.log(d1wk);

        //Retrieve last 7 days of data
        startDate1wk = d1wk;
        endDate1wk = Date.now();
        oneWeek = timeStamps1moDates.filter(function (obj) {
            return obj >= startDate1wk && obj <= endDate1wk;
        });
        //console.log(oneWeek);

        //Get last items from prices corresponding to days
        numberOfDays1wk = oneWeek.length;
        //console.log(numberOfDays1wk);

        //Get appropriate number of prices (xs1Week)
        let pricesList1Wk = [];
        pricesList1Wk = adjustedClose1mo;
        xs1Week = pricesList1Wk.slice(Math.max(adjustedClose1mo.length - numberOfDays1wk, 0));
        //console.log(xs1Week);

        //Dates with prices on chart (ys1Week)
        ys1Week = oneWeek;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys1Week);

        //Draw chart 1 WEEK
        function createChartWeek() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart5days').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: xs1Week,
                        spanGaps: true,
                        pointRadius: 2,
                        hitRadius: 6,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Week,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }]
                    },
                    tooltips: {
                        mode: 'nearest',
                        titleFontSize: 14,
                        bodyFontSize: 14
                    }
                }
            });
        }
        createChartWeek();
        //<--END CHART FOR 1 WEEK -->

        //<--START CHART FOR 1 MONTH -->
        //Draw chart 1 MONTH
        function createChart1Month() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart1month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: adjustedClose1mo,
                        spanGaps: true,
                        pointRadius: 2,
                        hitRadius: 6,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: timeStamps1moDates,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }]
                    },
                    tooltips: {
                        mode: 'nearest',
                        titleFontSize: 14,
                        bodyFontSize: 14
                    }
                }
            });
        }
        createChart1Month();
        //<--END CHART FOR 1 MONTH -->
    }
    createCharts1();

    //Charts for 6 months, 1 year, 5 years and 10 years
    var adjustedClose10y = []
    var timeStamps10y = [];
    var timeStamps10yDates = [];
    var timeStamps10yDatesLocal = [];
    var timeStamps10yString = [];
    var timeStamps10yLocalString = [];

    async function createCharts2() {
        // Storing response
        const response = await fetch("https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/get-charts?region=US&comparisons=%255EGDAXI%252C%255EFCHI&symbol=" + '@Html.DisplayFor(model => model.Yritys)' + "&interval=1d&range=10y", {
            "method": "GET",
            "headers": {
                "x-rapidapi-host": "apidojo-yahoo-finance-v1.p.rapidapi.com",
                "x-rapidapi-key": "f7ee3d84ddmsh445490645db82aep166082jsnd9792b57303c"
            }
        });
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
        let adjustedClose10yRaw = data["chart"]["result"][0]["indicators"]["quote"][0]["close"];

        //Prices to two-decimal format
        adjustedClose10y = adjustedClose10yRaw.map(function (elements) {
            if (elements != null) {
                return Number(elements.toFixed(2));
            }
            });
        //console.log(adjustedClose10y);

        timeStamps10y = data["chart"]["result"][0]["timestamp"];
        //console.log(timeStamps10y);

        //Convert timestamps to dates
        timeStamps10yDates = timeStamps10y.map(function (d) { return new Date(d * 1000) });
        //timeStamps10yDates = timeStamps10y.map(function (d) { return new Date(d * 1000).toLocaleString() });

        //<--START CHART FOR 6 MONTHS -->
        //Offset dat by six months (180 days)
        d6mo = new Date();
        d6mo.setDate(d6mo.getDate() - 180);
        //console.log(d6mo);

        //Retrieve last 180 days of data
        startDate6mo = d6mo;
        endDate6mo = Date.now();
        sixMonths = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate6mo && obj <= endDate6mo;
        });
        //console.log(sixMonths);

        //Get last items from prices corresponding to days
        numberOfDays6mo = sixMonths.length;
        //console.log(numberOfDays6mo);

        //Get appropriate number of prices (xs6Month)
        let pricesList6Mo = [];
        //pricesList6Mo = adjustedClose10y;
        pricesList6Mo = adjustedClose10y;
        xs6Month = pricesList6Mo.slice(Math.max(adjustedClose10y.length - numberOfDays6mo, 0));
        //console.log(xs6Month);

        //Dates with prices on chart (ys6Month)
        ys6Month = sixMonths;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys6Month);

        //Draw chart 6 MONTHS
        function createChart6Month() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart6months').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: xs6Month,
                        spanGaps: true,
                        pointRadius: 4,
                        hitRadius: 6,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys6Month,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }],
                        tooltips: {
                            mode: 'nearest',
                            titleFontSize: 14,
                            bodyFontSize: 14
                        }
                    }
                }
            });
        }
        createChart6Month();
        //<--END CHART FOR 6 MONTHS -->

        //<--START CHART FOR 1 YEAR -->
        //Offset dat by one year (365 days)
        d1yr = new Date();
        d1yr.setDate(d1yr.getDate() - 365);
        //console.log(d1yr);

        //Retrieve last 365 days of data
        startDate1yr = d1yr;
        endDate1yr = Date.now();
        oneYear = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate1yr && obj <= endDate1yr;
        });
        //console.log(oneYear);

        //Get last items from prices corresponding to days   
        numberOfDays1yr = oneYear.length;
        //console.log(numberOfDays5yr);

        //Get appropriate number of prices (xs5Year)
        let pricesList1Yr = [];
        pricesList1Yr = adjustedClose10y;
        xs1Year = pricesList1Yr.slice(Math.max(adjustedClose10y.length - numberOfDays1yr, 0));
        //console.log(xs1Year);

        //Dates with prices on chart (ys1Year)
        ys1Year = oneYear;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys1Year);

        //Draw chart 1 YEAR
        function createChart1Year() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart1year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: xs1Year,
                        spanGaps: true,
                        pointRadius: 5,
                        hitRadius: 8,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }]
                    },
                    tooltips: {
                        mode: 'nearest',
                        titleFontSize: 14,
                        bodyFontSize: 14
                    }
                }
            });
        }
        createChart1Year();
        //<--END CHART FOR 1 YEAR -->

        //<--START CHART FOR 5 YEARS -->
        //Offset dat by five years (1825 days)
        d5yr = new Date();
        d5yr.setDate(d5yr.getDate() - 1825);
        //console.log(d5yr);

        //Retrieve last 1825 days of data
        startDate5yr = d5yr;
        endDate5yr = Date.now();
        fiveYears = timeStamps10yDates.filter(function (obj) {
            return obj >= startDate5yr && obj <= endDate5yr;
        });
        //console.log(fiveYears);

        //Get last items from prices corresponding to days   
        numberOfDays5yr = fiveYears.length;
        //console.log(numberOfDays5yr);

        //Get appropriate number of prices (xs5Year)
        let pricesList5Yr = [];
        pricesList5Yr = adjustedClose10y;
        xs5Year = pricesList5Yr.slice(Math.max(adjustedClose10y.length - numberOfDays5yr, 0));
        //console.log(xs5Year);

        //Dates with prices on chart (ys5Year)
        ys5Year = fiveYears;
        //--> NEED TO CONVERT DATES TO SHORTER FORMAT!
        //console.log(ys5Year);

        //Draw chart 5 YEARS
        function createChart5Year() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart5year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: xs5Year,
                        spanGaps: true,
                        pointstyle: 'line',
                        pointRadius: 2,
                        hitRadius: 6,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys5Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }]
                    },
                    tooltips: {
                        mode: 'nearest',
                        titleFontSize: 14,
                        bodyFontSize: 14
                    }
                }
            });
        }
        createChart5Year();
        //<--END CHART FOR 5 YEARS -->

        //<--START CHART FOR 10 YEARS -->
        //Draw chart 10 YEARS
        function createChart10Year() {
            //Vertical line
            Chart.defaults.LineWithLine = Chart.defaults.line;
            Chart.controllers.LineWithLine = Chart.controllers.line.extend({
                draw: function (ease) {
                    Chart.controllers.line.prototype.draw.call(this, ease);

                    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {
                        var activePoint = this.chart.tooltip._active[0],
                            ctx = this.chart.ctx,
                            x = activePoint.tooltipPosition().x,
                            topY = this.chart.legend.bottom,
                            bottomY = this.chart.chartArea.bottom;

                        // draw line
                        ctx.save();
                        ctx.beginPath();
                        ctx.moveTo(x, topY);
                        ctx.lineTo(x, bottomY);
                        ctx.lineWidth = 2;
                        ctx.strokeStyle = '#07C';
                        ctx.stroke();
                        ctx.restore();
                    }
                }
            });

            var ctx = document.getElementById('chart10year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'LineWithLine',
                data: {
                    datasets: [{
                        data: adjustedClose10y,
                        spanGaps: true,
                        pointRadius: 2,
                        hitRadius: 6,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: timeStamps10yDates,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            display: false
                        }]
                    },
                    tooltips: {
                        mode: 'nearest',
                        titleFontSize: 14,
                        bodyFontSize: 14
                    }
                }
            });
        }
        createChart10Year();
        //<--END CHART FOR 10 YEARS -->

    }
    createCharts2();
</script>