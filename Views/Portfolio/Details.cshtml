@model StockMonitor_2.Models.Portfolio
<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>
<body>
    <div>
        <h2><span id='companyName'></span></h2>
        <h4>(@Html.DisplayFor(model => model.Yritys))</h4>
    </div>

    <div>
        <hr />
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-3">
                    <dt style="font-size:x-large;">Kurssi nyt</dt>
                    <dd><span id='currentPrice' style="font-size:x-large;color:green"></span></dd>
                    <dt style="font-size:large;">Avaus</dt>
                    <dd><span id='openingPrice' style="font-size:large;color:black"></span></dd>
                    <dt style="font-size:large;">Ylin</dt>
                    <dd><span id='highPrice' style="font-size:large;color:black"></span></dd>
                    <dt style="font-size:large;">Alin</dt>
                    <dd><span id='lowPrice' style="font-size:large;color:black"></span></dd>
                    <dt style="font-size:large;">Edellinen päätös</dt>
                    <dd><span id='previousClose' style="font-size:large;color:black"></dd>
                </div>
                <div class="col-sm-9">
                    <dt style="font-size:medium;font-weight:bold">Maa</dt>
                    <dd><span id='country' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Valuutta</dt>
                    <dd><span id='currency' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Pörssi</dt>
                    <dd><span id='exchange' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Toimiala</dt>
                    <dd><span id='industry' style="font-size:medium"></span></dd>
                    @*<dd><span id='weburl' style="font-size:medium"></span></dd>*@
                </div>
            </div>
        </dl>
    </div>

    <div class="col-sm-12">
        <ul class="nav nav-pills">
            <li class="active"><a data-toggle="tab" href="#5days">5 päivää</a></li>
            <li><a data-toggle="tab" href="#30days">Kuukausi</a></li>
            <li><a data-toggle="tab" href="#6months">6 kuukautta</a></li>
            <li><a data-toggle="tab" href="#1year">1 vuosi</a></li>
            @*<li><a data-toggle="tab" href="#2years">2 vuotta</a></li>
        <li><a data-toggle="tab" href="#5years">5 vuotta</a></li>
        <li><a data-toggle="tab" href="#10years">10 vuotta</a></li>*@
            <li><a data-toggle="tab" href="#all">Kaikki</a></li>
        </ul>
    </div>
    <div class="tab-content">
        <div id="5days" class="tab-pane fade in active">
            <br />
            <br />
            <h3>Viimeiset 5 päivää</h3>
            <div class="col-sm-12">
                <canvas id="chart5days"></canvas>
            </div>
            @*<div class="col-sm-3">
                <p hidden>Random text</p>
            </div>*@
        </div>
        <div id="30days" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 30 päivää</h3>
            <div class="col-sm-12">
                <canvas id="chart1month"></canvas>
            </div>
            @*<div class="col-sm-3">
                <p hidden>Random text</p>
            </div>*@
        </div>
        <div id="6months" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 6 kuukautta</h3>
            <div class="col-sm-12">
                <canvas id="chart6month"></canvas>
            </div>
            @*<div class="col-sm-3">
                <p hidden>Random text</p>
            </div>*@
        </div>
        <div id="1year" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeisin vuosi</h3>
            <div class="col-sm-12">
                <canvas id="chart1year"></canvas>
            </div>
            @*<div class="col-sm-3">
                <p hidden>Random text</p>
            </div>*@
        </div>
        <div id="all" class="tab-pane fade">
            <br />
            <br />
            <h3>Kaikki</h3>
            <div class="col-sm-12">
                <canvas id="chartAll"></canvas>
            </div>
            @*<div class="col-sm-3">
                <p hidden>Random text</p>
            </div>*@
        </div>
    </div>
    @*<div class="col-sm-12">
            <button onClick="createChartWeek()">5 days</button>
            <input id="5days" type="button" value="5 days" onclick="createChartWeek();" />
            <input id="all" type="button" value="All" onclick="createChartAll();" />
            <hr />
            <div width="50vw" height="50vw">
                <canvas id="chart"></canvas>
            </div>
        </div>*@

    <div class="col-sm-12">
        <br />
        <p>
            <a class="btn btn-info" @Html.ActionLink("Takaisin", "Index")
        </p>
    </div>


</body>
</html>

<script type="text/javascript">
    //Get stock data from API(finnhub.io)
    //Construct url
    var a = 'https://finnhub.io/api/v1/quote?symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var c = '&token=btdnsi748v6p1d4q5pcg';
    function url() {
        u = a + b + c
        return u
    }
    url();

    //Get data from url
    const url1 = u;
    async function getStockInfo() {

        // Storing response
        const response = await fetch(url1);

        // Storing data in JSON
        var data = await response.json();
        //console.log(data);

        //Javascript destructuring
        const { c, o, h, l, pc } = data;
        document.getElementById('currentPrice').textContent = c.toFixed(2);
        document.getElementById('openingPrice').textContent = o.toFixed(2);
        document.getElementById('highPrice').textContent = h.toFixed(2);
        document.getElementById('lowPrice').textContent = l.toFixed(2);
        document.getElementById('previousClose').textContent = pc.toFixed(2);
    }
    getStockInfo();


    //Get company data
    //Construct url
    var a = 'https://finnhub.io/api/v1//stock/profile2?symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var c = '&token=btdnsi748v6p1d4q5pcg';
    function url2() {
        u2 = a + b + c
        return u
    }
    url2();

    //Get data from url
    const url3 = u2;
    async function getCompanyData() {

        // Storing response
        const response = await fetch(url3);

        // Storing data in JSON
        var data = await response.json();
        //console.log(data);

        //Javascript destructuring
        const { name, country, currency, exchange, finnhubIndustry, weburl, logo } = data;
        document.getElementById('companyName').textContent = name;
        document.getElementById('country').textContent = country;
        document.getElementById('currency').textContent = currency;
        document.getElementById('exchange').textContent = exchange;
        document.getElementById('industry').textContent = finnhubIndustry;
        //document.getElementById('weburl').textContent = weburl;
        //document.getElementById('logo').textContent = logo;
    }
    getCompanyData();

    //Draw chart - JSON data from alphavantage
    //document.getElementById('5days').onclick = createChartWeek();
    //document.getElementById('all').onclick = createChartAll();
    //Construct url
    var a = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var c = '&outputsize=full&apikey=P3FY8FMGNJ4C88D6';
    function url4() {
        u3 = a + b + c
        return u
    }
    url4();

    //Get data from url
    const url5 = u3;
    async function getDailyDataUrl() {
        // Storing response
        const response = await fetch(url5);
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
    }
    getDailyDataUrl();

    var dateList = [];
    var pricesList = [];
    var lastRefreshed = "";
    async function getDailyData() {
        const response = await fetch(url5);

        // Storing data in JSON
        var data = await response.json();
        //console.log(data);

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates = data['Time Series (Daily)'];
        for (var date in jsonDataDates) {
            dateList.push(date);
        }
        //console.log(dateList);

        //Collect closing prices JSON
        var jsonDataPrices = data['Time Series (Daily)'];
        for (var price in jsonDataPrices) {
            pricesList.push(jsonDataPrices[price]['4. close'])
        }
        //console.log(pricesList);

        //Get latest date from JSON (last refreshed)
        var lastRefreshed = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed);

        //Create chart - ALL
        var xsAll = [];
        var ysAll = [];
        xsAll = pricesList.reverse();
        ysAll = dateList.reverse();
        //console.log(ysAll);
        function createChartAll() {
            var ctx = document.getElementById('chartAll').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xsAll,
                        fill: false,
                        
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysAll,
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        };
        createChartAll();

        //Create chart - 1 WEEK
        //Offset date by one week (7days)
        var d = new Date();
        d.setDate(d.getDate() - 7);
        //Convert date format to yyyy-MM-dd
        var dateFormattedWk = new Date(d);
        dateFormattedWk = [
            d.getFullYear(),
            ('0' + (d.getMonth() + 1)).slice(-2),
            ('0' + d.getDate()).slice(-2)
        ].join('-');
        console.log(dateFormattedWk);
        //Get only last 7 days of data
        var startDateWk = dateFormattedWk;
        var endDateWk = lastRefreshed;
        var oneWeek = dateList.filter(function (obj) {
            return obj >= startDateWk && obj <= endDateWk;
        });
        console.log(oneWeek);
        //Get last items from prices corresponding to days
        var numberOfDaysWk = 0;
        numberOfDaysWk = oneWeek.length;
        console.log(numberOfDaysWk);
        //Get appropriate nnumber of prices
        var xsWeek = pricesList.slice(Math.max(pricesList.length - numberOfDaysWk, 0));
        //console.log(xsWeek);
        var ysWeek = oneWeek;

        //Draw chart
        function createChartWeek() {
            var ctx = document.getElementById('chart5days').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xsWeek,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysWeek,
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartWeek();

        //Create chart - 1 MONTH
        //Offset date by one month (30 days)
        var dMth = new Date();
        dMth.setDate(dMth.getDate() - 30);
        //Convert date format to yyyy-MM-dd
        var dateFormattedMth = new Date(dMth);
        dateFormattedMth = [
            dMth.getFullYear(),
            ('0' + (dMth.getMonth() + 1)).slice(-2),
            ('0' + dMth.getDate()).slice(-2)
        ].join('-');
        console.log(dateFormattedMth);
        //Get only last 7 days of data
        var startDateMth = dateFormattedMth;
        var endDateMth = lastRefreshed;
        var oneMonth = dateList.filter(function (obj) {
            return obj >= startDateMth && obj <= endDateMth;
        });
        //console.log(oneWeek);
        //Get last items from prices corresponding to days
        var numberOfDaysMth = 0;
        numberOfDaysMth = oneMonth.length;
        console.log(numberOfDaysMth);
        //Get appropriate nnumber of prices
        var xsMonth = pricesList.slice(Math.max(pricesList.length - numberOfDaysMth, 0));
        //console.log(xsWeek);
        var ysMonth = oneMonth;

        //Draw chart
        function createChartMonth() {
            var ctx = document.getElementById('chart1month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xsMonth,
                        fill: false,

                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysMonth,
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartMonth();

        //Create chart - 6 MONTHS
        //Offset date by one month (180 days)
        var d6Mth = new Date();
        d6Mth.setDate(dMth.getDate() - 180);
        //Convert date format to yyyy-MM-dd
        var dateFormatted6Mth = new Date(d6Mth);
        dateFormatted6Mth = [
            dMth.getFullYear(),
            ('0' + (d6Mth.getMonth() + 1)).slice(-2),
            ('0' + d6Mth.getDate()).slice(-2)
        ].join('-');
        console.log(dateFormatted6Mth);
        //Get only last 7 days of data
        var startDate6Mth = dateFormatted6Mth;
        var endDate6Mth = lastRefreshed;
        var sixMonths = dateList.filter(function (obj) {
            return obj >= startDate6Mth && obj <= endDate6Mth;
        });
        //console.log(oneWeek);
        //Get last items from prices corresponding to days
        var numberOfDays6Mth = 0;
        numberOfDays6Mth = sixMonths.length;
        console.log(numberOfDays6Mth);
        //Get appropriate nnumber of prices
        var xs6Month = pricesList.slice(Math.max(pricesList.length - numberOfDays6Mth, 0));
        //console.log(xsWeek);
        var ys6Month = sixMonths;

        //Draw chart
        function createChart6Month() {
            var ctx = document.getElementById('chart6month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xs6Month,
                        fill: false,

                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys6Month,
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart6Month();

        //Create chart - 1 year
        //Offset date by one month (365 days)
        var d1Yr = new Date();
        d1Yr.setDate(d1Yr.getDate() - 365);
        //Convert date format to yyyy-MM-dd
        var dateFormatted1Yr = new Date(d1Yr);
        dateFormatted1Yr = [
            d1Yr.getFullYear(),
            ('0' + (d1Yr.getMonth() + 1)).slice(-2),
            ('0' + d1Yr.getDate()).slice(-2)
        ].join('-');
        console.log(dateFormatted1Yr);
        //Get only last 7 days of data
        var startDate1Yr = dateFormatted1Yr;
        var endDate1Yr = lastRefreshed;
        var oneYear = dateList.filter(function (obj) {
            return obj >= startDate1Yr && obj <= endDate1Yr;
        });
        console.log(oneYear);
        //Get last items from prices corresponding to days
        var numberOfDays1Yr = 0;
        numberOfDays1Yr = oneYear.length;
        console.log(numberOfDays1Yr);
        //Get appropriate nnumber of prices
        var xs1Year = pricesList.slice(Math.max(pricesList.length - numberOfDays1Yr, 0));
        console.log(xs1Year);
        var ys1Year = oneYear;

        //Draw chart
        function createChart1Year() {
            var ctx = document.getElementById('chart1year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: false,
                        data: xs1Year,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Year,
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1Year();
    }
    getDailyData();

</script>
