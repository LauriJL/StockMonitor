@model StockMonitor_2.Models.Portfolio
<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>
<body>
    @*Company data*@
    <div>
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-4">
                    <h2><span id='companyName'></span></h2>
                    <h4>(@Html.DisplayFor(model => model.Yritys))</h4>
                    <p>Data retrieved from Alphavantage API.</p>
                </div>
                <div class="col-sm-4" style="border-left:solid 1px">
                    <br />
                    <dt style="font-size:medium;font-weight:bold">Maa</dt>
                    <dd><span id='country' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Valuutta</dt>
                    <dd><span id='currency' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Pörssi</dt>
                    <dd><span id='exchange' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Toimiala</dt>
                    <dd><span id='sector' style="font-size:medium"></span></dd>
                </div>
            </div>

        </dl>
    </div>

    @*Financial data*@
    <div>
        <hr />
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Kurssi nyt</dt>
                    <dd style="font-size:medium;"><span id='currentPrice' style="font-weight:bold;color:green"></span></dd>
                    <dt style="font-size:medium;">Avaus</dt>
                    <dd style="font-size:medium;"><span id='openingPrice'></span></dd>
                    <dt style="font-size:medium;">Ylin</dt>
                    <dd style="font-size:medium;"><span id='highPrice'></span></dd>
                    <dt style="font-size:medium;">Alin</dt>
                    <dd style="font-size:medium;"><span id='lowPrice'></span></dd>
                    <dt style="font-size:medium;">Vaihto (määrä)</dt>
                    <dd style="font-size:medium;"><span id='volume'></span></dd>
                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Edellinen päätös</dt>
                    <dd style="font-size:medium;"><span id='previousClose'></span></dd>
                    <dt style="font-size:medium;">Muutos</dt>
                    <dd style="font-size:medium;"><span id='change'></span></dd>
                    <dt style="font-size:medium;">Muutos %</dt>
                    <dd style="font-size:medium;"><span id='changepercent'></span></dd>

                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;font-weight:bold">P/E</dt>
                    <dd><span id='pe' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">PEG</dt>
                    <dd><span id='peg' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/S</dt>
                    <dd><span id='ps' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/B</dt>
                    <dd><span id='pb' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Osinko per osake</dt>
                    <dd><span id='dividend' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">EPS</dt>
                    <dd><span id='eps' style="font-size:medium"></span></dd>
                </div>
            </div>
        </dl>
        <hr />
    </div>
    @*Charts*@
    <div class="col-sm-12">
        <ul class="nav nav-pills">
            <li class="active"><a data-toggle="tab" href="#5days">Viikko</a></li>
            <li><a data-toggle="tab" href="#30days">Kuukausi</a></li>
            <li><a data-toggle="tab" href="#6months">6 kuukautta</a></li>
            <li><a data-toggle="tab" href="#1year">1 vuosi</a></li>
            <li><a data-toggle="tab" href="#5years">5 vuotta</a></li>
            <li><a data-toggle="tab" href="#10years">10 vuotta</a></li>
        </ul>
    </div>
    <div class="tab-content">
        <div id="5days" class="tab-pane fade in active">      
            <br />
            <br />
            <h3>Viikko</h3>
            <div class="col-sm-11">
                <canvas id="chart5days" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="30days" class="tab-pane fade">
            <br />
            <br />
            <h3>Kuukausi</h3>
            <div class="col-sm-11">
                <canvas id="chart1month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="6months" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 6 kuukautta</h3>
            <div class="col-sm-11">
                <canvas id="chart6month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1year" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeisin vuosi</h3>
            <div class="col-sm-11">
                <canvas id="chart1year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="5years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 5 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart5year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="10years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 10 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart10year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
    </div>

    <div class="col-sm-12">
        <br />
        <p>
            <a class="btn btn-info" @Html.ActionLink("Takaisin", "Index")
        </p>
    </div>


</body>
</html>

<script type="text/javascript">

    //<-- STOCK DATA -->
    //Alphavantage

    //Construct url
    var aStockData = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var cStockData = '&apikey=P3FY8FMGNJ4C88D6';
    var uStockData = [];
    function urlStockData() {
        uQuote = aStockData + b + cStockData
        //return uStockData
    }
    urlStockData();
    //console.log(uQuote)

    //Get data from url
    //const url1 = uQuote;
    async function getStockData() {

        // Storing response
        //const response = await fetch(url1);
        const response = await fetch(uQuote);

        // Storing data in JSON
        var data = await response.json();
        console.log(data);

        //Javascript destructuring
        var pvm = data["Global Quote"]["07. latest trading day"];
        var kurssiNyt = data["Global Quote"]["05. price"];
        var avaus = data["Global Quote"]["02. open"];
        var ylin = data["Global Quote"]["03. high"];
        var alin = data["Global Quote"]["04. low"];
        var edellinen = data["Global Quote"]["08. previous close"];
        var maara = data["Global Quote"]["06. volume"];
        var muutos = data["Global Quote"]["09. change"];
        var muutosprosentti = data["Global Quote"]["10. change percent"];

        document.getElementsByClassName('date').textContent = pvm;
        document.getElementById('currentPrice').textContent = kurssiNyt;
        document.getElementById('openingPrice').textContent = avaus;
        document.getElementById('highPrice').textContent = ylin;
        document.getElementById('lowPrice').textContent = alin;
        document.getElementById('volume').textContent = maara;
        document.getElementById('previousClose').textContent = edellinen;
        document.getElementById('change').textContent = muutos;
        document.getElementById('changepercent').textContent = muutosprosentti;
    }
    getStockData();
    //console.log(price);


    //<-- COMPANY OVERVIEW DATA -->
    //Alphavantage

    //Construct url
    var aOverview = 'https://www.alphavantage.co/query?function=OVERVIEW&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var cOverview = '&apikey=P3FY8FMGNJ4C88D6';
    function urlAVCompanyData() {
        uCompanyOverview = aOverview + b + cOverview
        return uCompanyOverview
    }
    urlAVCompanyData();

    //Get data from url
    async function getCompanyData() {
        // Storing response
        const response = await fetch(uCompanyOverview);
        // Storing data in JSON
        var data = await response.json();
        //console.log(data);
        //Javascript destructuring
        const { Name, Exchange, Country, Currency, Sector, PERatio, PEGRatio, PriceToSalesRatioTTM, PriceToBookRatio, DividendPerShare, EPS } = data;
        document.getElementById('companyName').textContent = Name;
        document.getElementById('exchange').textContent = Exchange;
        document.getElementById('country').textContent = Country;
        document.getElementById('currency').textContent = Currency;
        document.getElementById('sector').textContent = Sector;
        document.getElementById('pe').textContent = PERatio;
        document.getElementById('peg').textContent = PEGRatio;
        document.getElementById('ps').textContent = PriceToSalesRatioTTM;
        document.getElementById('pb').textContent = PriceToBookRatio;
        document.getElementById('dividend').textContent = DividendPerShare;
        document.getElementById('eps').textContent = EPS;
    }
    getCompanyData();

    //<-- CHARTS -->
    //Alphavantage

    //Construct URL (timeseries daily, full)
    var aChartData = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var cChartData = '&outputsize=full&apikey=P3FY8FMGNJ4C88D6';
    function urlAVDaily() {
        uDaily = aChartData + b + cChartData
        return uDaily
    }
    urlAVDaily();
    //console.log(uDaily);

    //Vars
    var data = [];
    var dateList = [];
    var pricesList = [];
    var pricesList2 = [];
    var pricesList3 = [];
    var pricesList4 = [];
    var pricesList5 = [];
    var pricesList6 = [];
    var lastRefreshed = "";

    //Vars - 1 week
    var d1wk = '';
    var dateFormatted1wk = '';
    var startDate1wk = '';
    var endDate1wk = '';
    var oneWeek = [];
    var numberOfDays1wk = 0;
    var xs1Week = [];
    var ys1Week = [];

    //Vars - 1 MONTH
    var d1mo = '';
    var dateFormatted1mo = '';
    var startDate1mo = '';
    var endDate1mo = '';
    var oneMonth = [];
    var numberOfDays1mo = 0;
    var xs1Month = [];
    var ys1Month = [];

    //Vars - 6 MONTHS
    var d6mo = '';
    var dateFormatted6mo = '';
    var startDate6mo = '';
    var endDate6mo = '';
    var sixMonths = [];
    var numberOfDays6mo = 0;
    var xs6Months = [];
    var ys6Months = [];

    //Vars - 1 YEAR
    var d1yr = '';
    var dateFormatted1yr = '';
    var startDate1yr = '';
    var endDate1yr = '';
    var oneYear = [];
    var numberOfDays1yr = 0;
    var xs1Year = [];
    var ys1Year = [];

    //Vars - 5 YEARS
    var d5yr = '';
    var dateFormatted5yr = '';
    var startDate5yr = '';
    var endDate5yr = '';
    var fiveYears = [];
    var numberOfDays5yr = 0;
    var xs5Year = [];
    var ys5Year = [];

    //Vars - 10 YEARS
    var d10yr = '';
    var dateFormatted10yr = '';
    var startDate10yr = '';
    var endDate10yr = '';
    var tenYears = [];
    var numberOfDays10yr = 0;
    var xs10Year = [];
    var ys10Year = [];

    //Get timeseries daily data from url
    async function createCharts() {
        // Storing response
        const response = await fetch(uDaily);
        // Storing data in JSON
        data = await response.json();
        //console.log(data);

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates = data['Time Series (Daily)'];
        for (var date in jsonDataDates) {
            dateList.push(date);
        }
        //console.log(dateList);
        //Collect closing prices JSON
        var jsonDataPrices = data['Time Series (Daily)'];
        for (var price in jsonDataPrices) {
            pricesList.push(jsonDataPrices[price]['4. close'])
            pricesList2.push(jsonDataPrices[price]['4. close'])
            pricesList3.push(jsonDataPrices[price]['4. close'])
            pricesList4.push(jsonDataPrices[price]['4. close'])
            pricesList5.push(jsonDataPrices[price]['4. close'])
            pricesList6.push(jsonDataPrices[price]['4. close'])
        }
        //console.log(pricesList);
        //Get latest date from JSON (last refreshed)
        lastRefreshed = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed);

        //<-- START: CHART 1 WEEK -->
        //Offset date by one week (7days)
        d1wk = new Date();
        d1wk.setDate(d1wk.getDate() - 7);
        //console.log(d1wk);

        //Convert date format to yyyy-MM-dd
        dateFormatted1wk = new Date(d1wk);
        dateFormatted1wk = [
            d1wk.getFullYear(),
            ('0' + (d1wk.getMonth() + 1)).slice(-2),
            ('0' + d1wk.getDate()).slice(-2)
        ].join('-');
        console.log(dateFormatted1wk);

        //Retrieve last 7 days of data
        startDate1wk = dateFormatted1wk;
        endDate1wk = lastRefreshed;
        oneWeek = dateList.filter(function (obj) {
            return obj >= startDate1wk && obj <= endDate1wk;
        });
        //console.log(oneWeek);

        //Get last items from prices corresponding to days   
        numberOfDays1wk = oneWeek.length;
        //console.log(numberOfDays1wk);

        //Get appropriate number of prices and reverse order of prices for chart (xs1Week)
        let pricesListReverse1Wk = [];
        pricesListReverse1Wk = pricesList.reverse();
        xs1Week = pricesListReverse1Wk.slice(Math.max(pricesList.length - numberOfDays1wk, 0));
        //console.log(xs1Week);

        //Reverse dates to correspond with prices on chart (ys1Week)
        ys1Week = oneWeek.reverse();
        //console.log(ys1Week);

        //Draw chart 1 WEEK
        function createChartWeek() {
            var ctx = document.getElementById('chart5days').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Week,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Week,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartWeek();
        //<-- END: CHART 1 WEEK -->

        //<-- START: CHART 1 MONTH -->
        //Offset date by one MONTH (30 days)
        d1mo = new Date();
        d1mo.setDate(d1mo.getDate() - 30);
        //console.log(d1mo);

        //Convert date format to yyyy-MM-dd
        dateFormatted1mo = new Date(d1mo);
        dateFormatted1mo = [
            d1mo.getFullYear(),
            ('0' + (d1mo.getMonth() + 1)).slice(-2),
            ('0' + d1mo.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted1mo);

        //Retrieve last 30 days of data
        startDate1mo = dateFormatted1mo;
        endDate1mo = lastRefreshed;
        oneMonth = dateList.filter(function (obj) {
            return obj >= startDate1mo && obj <= endDate1mo;
        });
        //console.log(oneMonth);

        //Get last items from prices corresponding to days   
        numberOfDays1mo = oneMonth.length;
        //console.log(numberOfDays1mo);

        //Get appropriate number of prices and reverse order of prices for chart (xs1Month)
        let pricesListReverse1mo = [];
        pricesListReverse1mo = pricesList2.reverse();
        xs1Month = pricesListReverse1mo.slice(Math.max(pricesList2.length - numberOfDays1mo, 0));
        //console.log(xs6Months);

        //Reverse dates to correspond with prices on chart (ys1Month)
        ys1Month = oneMonth.reverse();
        //console.log(ys1Month);

        //Draw chart 1 MONTH
        function createChart1Month() {
            var ctx = document.getElementById('chart1month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Month,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Month,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1Month();
        //<-- END: CHART 1 MONTH -->

        //<-- START: CHART 6 MONTHS -->
        //Offset date by six MONTHs (180 days)
        d6mo = new Date();
        d6mo.setDate(d6mo.getDate() - 180);
        //console.log(d6mo);

        //Convert date format to yyyy-MM-dd
        dateFormatted6mo = new Date(d6mo);
        dateFormatted6mo = [
            d6mo.getFullYear(),
            ('0' + (d6mo.getMonth() + 1)).slice(-2),
            ('0' + d6mo.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted6mo);

        //Retrieve last 180 days of data
        startDate6mo = dateFormatted6mo;
        endDate6mo = lastRefreshed;
        sixMonths = dateList.filter(function (obj) {
            return obj >= startDate6mo && obj <= endDate6mo;
        });
        //console.log(sixMonths);

        //Get last items from prices corresponding to days   
        numberOfDays6mo = sixMonths.length;
        //console.log(numberOfDays6mo);

        //Get appropriate number of prices and reverse order of prices for chart (xs6Months)
        let pricesListReverse6mo = [];
        pricesListReverse6mo = pricesList3.reverse();
        xs6Months = pricesListReverse6mo.slice(Math.max(pricesList3.length - numberOfDays6mo, 0));
        //console.log(xs6Months);

        //Reverse dates to correspond with prices on chart (ys6Months)
        ys6Months = sixMonths.reverse();
        //console.log(ys6Months);

        //Draw chart 6 MONTHS
        function createChart6Months() {
            var ctx = document.getElementById('chart6month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs6Months,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys6Months,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart6Months();
        //<-- END: CHART 6 MONTHS -->

        //<-- START: CHART 1 YEAR -->
        //Offset date by one YEAR (365 days)
        d1yr = new Date();
        d1yr.setDate(d1yr.getDate() - 365);
        //console.log(d1yr);

        //Convert date format to yyyy-MM-dd
        dateFormatted1yr = new Date(d1yr);
        dateFormatted1yr = [
            d1yr.getFullYear(),
            ('0' + (d1yr.getMonth() + 1)).slice(-2),
            ('0' + d1yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted1yr);

        //Retrieve last 365 days of data
        startDate1yr = dateFormatted1yr;
        endDate1yr = lastRefreshed;
        oneYear = dateList.filter(function (obj) {
            return obj >= startDate1yr && obj <= endDate1yr;
        });
        //console.log(oneYear);

        //Get last items from prices corresponding to days   
        numberOfDays1yr = oneYear.length;
        //console.log(numberOfDays1yr);

        //Get appropriate number of prices and reverse order of prices for chart (xs1Year)
        let pricesListReverse1yr = [];
        pricesListReverse1yr = pricesList4.reverse();
        xs1Year = pricesListReverse1yr.slice(Math.max(pricesList4.length - numberOfDays1yr, 0));
        //console.log(xs1Year);

        //Reverse dates to correspond with prices on chart (ys6Months)
        ys1Year = oneYear.reverse();
        //console.log(ys1Year);

        //Draw chart 1 YEAR
        function createChart1Year() {
            var ctx = document.getElementById('chart1year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs1Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys1Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1Year();
        //<-- END: CHART 1 YEAR -->

        //<-- START: CHART 5 YEARS -->
        //Offset date by five YEARS (1825 days)
        d5yr = new Date();
        d5yr.setDate(d5yr.getDate() - 1825);
        //console.log(d5yr);

        //Convert date format to yyyy-MM-dd
        dateFormatted5yr = new Date(d5yr);
        dateFormatted5yr = [
            d5yr.getFullYear(),
            ('0' + (d5yr.getMonth() + 1)).slice(-2),
            ('0' + d5yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted5yr);

        //Retrieve last 1825 days of data
        startDate5yr = dateFormatted5yr;
        endDate5yr = lastRefreshed;
        fiveYears = dateList.filter(function (obj) {
            return obj >= startDate5yr && obj <= endDate5yr;
        });
        //console.log(fiveYears);

        //Get last items from prices corresponding to days   
        numberOfDays5yr = fiveYears.length;
        //console.log(numberOfDays5yr);

        //Get appropriate number of prices and reverse order of prices for chart (xs5Year)
        let pricesListReverse5yr = [];
        pricesListReverse5yr = pricesList5.reverse();
        xs5Year = pricesListReverse5yr.slice(Math.max(pricesList5.length - numberOfDays5yr, 0));
        //console.log(xs5Year);

        //Reverse dates to correspond with prices on chart (ys6Months)
        ys5Year = fiveYears.reverse();
        //console.log(ys5Year);

        //Draw chart 5 YEARS
        function createChart5Years() {
            var ctx = document.getElementById('chart5year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs5Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys5Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart5Years();
        //<-- END: CHART 5 YEARS -->

        //<-- START: CHART 10 YEARS -->
        //Offset date by ten YEARS (3650 days)
        d10yr = new Date();
        d10yr.setDate(d10yr.getDate() - 3650);
        //console.log(d10yr);

        //Convert date format to yyyy-MM-dd
        dateFormatted10yr = new Date(d10yr);
        dateFormatted10yr = [
            d10yr.getFullYear(),
            ('0' + (d10yr.getMonth() + 1)).slice(-2),
            ('0' + d10yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted10yr);

        //Retrieve last 3650 days of data
        startDate10yr = dateFormatted10yr;
        endDate10yr = lastRefreshed;
        tenYears = dateList.filter(function (obj) {
            return obj >= startDate10yr && obj <= endDate10yr;
        });
        //console.log(tenYears);

        //Get last items from prices corresponding to days   
        numberOfDays10yr = tenYears.length;
        //console.log(numberOfDays10yr);

        //Get appropriate number of prices and reverse order of prices for chart (xs5Year)
        let pricesListReverse10yr = [];
        pricesListReverse10yr = pricesList6.reverse();
        xs10Year = pricesListReverse10yr.slice(Math.max(pricesList6.length - numberOfDays10yr, 0));
        //console.log(xs10Year);

        //Reverse dates to correspond with prices on chart (ys6Months)
        ys10Year = tenYears.reverse();
        //console.log(ys10Year);

        //Draw chart 10 YEARS
        function createChart10Years() {
            var ctx = document.getElementById('chart10year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs10Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys10Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart10Years();
        //<-- END: CHART 10 YEARS -->
    }
    createCharts();



</script>
