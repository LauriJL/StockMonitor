@model StockMonitor_2.Models.Portfolio
<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>
<body>
    @*Company data*@
    <div>
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-4">
                    <h2><span id='companyName'></span></h2>
                    <h4>(@Html.DisplayFor(model => model.Yritys))</h4>
                </div>
                <div class="col-sm-4" style="border-left:solid 1px">
                    <br />
                    <dt style="font-size:medium;font-weight:bold">Maa</dt>
                    <dd><span id='country' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Valuutta</dt>
                    <dd><span id='currency' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Pörssi</dt>
                    <dd><span id='exchange' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Toimiala</dt>
                    <dd><span id='sector' style="font-size:medium"></span></dd>
                </div>
            </div>

        </dl>
    </div>

    @*Financial data*@
    <div>
        <hr />
        <dl class="dl-horizontal">
            <div class="row">
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Kurssi nyt</dt>
                    <dd style="font-size:medium;"><span id='currentPrice' style="font-weight:bold;color:green"></span></dd>
                    <dt style="font-size:medium;">Avaus</dt>
                    <dd style="font-size:medium;"><span id='openingPrice'></span></dd>
                    <dt style="font-size:medium;">Ylin</dt>
                    <dd style="font-size:medium;"><span id='highPrice'></span></dd>
                    <dt style="font-size:medium;">Alin</dt>
                    <dd style="font-size:medium;"><span id='lowPrice'></span></dd>
                    <dt style="font-size:medium;">Vaihto (määrä)</dt>
                    <dd style="font-size:medium;"><span id='volume'></span></dd>
                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;">Edellinen päätös</dt>
                    <dd style="font-size:medium;"><span id='previousClose'></span></dd>
                    <dt style="font-size:medium;">Muutos</dt>
                    <dd style="font-size:medium;"><span id='change'></span></dd>
                    <dt style="font-size:medium;">Muutos %</dt>
                    <dd style="font-size:medium;"><span id='changepercent'></span></dd>

                </div>
                <div class="col-sm-3">
                    <dt style="font-size:medium;font-weight:bold">P/E</dt>
                    <dd><span id='pe' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">PEG</dt>
                    <dd><span id='peg' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/S</dt>
                    <dd><span id='ps' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">P/B</dt>
                    <dd><span id='pb' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">Osinko per osake</dt>
                    <dd><span id='dividend' style="font-size:medium"></span></dd>
                    <dt style="font-size:medium;font-weight:bold">EPS</dt>
                    <dd><span id='eps' style="font-size:medium"></span></dd>
                </div>
            </div>
        </dl>
        <hr />
    </div>
    @*Charts*@
    <div class="col-sm-12">
        <ul class="nav nav-pills">
            <li class="active"><a data-toggle="tab" href="#5days">Viikko</a></li>
            <li><a data-toggle="tab" href="#30days">Kuukausi</a></li>
            <li><a data-toggle="tab" href="#6months">6 kuukautta</a></li>
            <li><a data-toggle="tab" href="#1year">1 vuosi</a></li>
            <li><a data-toggle="tab" href="#5years">5 vuotta</a></li>
            <li><a data-toggle="tab" href="#10years">10 vuotta</a></li>
        </ul>
    </div>
    <div class="tab-content">
        <div id="5days" class="tab-pane fade in active">      
            <br />
            <br />
            <h3>Viikko</h3>
            <div class="col-sm-11">
                <canvas id="chart5days" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="30days" class="tab-pane fade">
            <br />
            <br />
            <h3>Kuukausi</h3>
            <div class="col-sm-11">
                <canvas id="chart1month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="6months" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 6 kuukautta</h3>
            <div class="col-sm-11">
                <canvas id="chart6month" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="1year" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeisin vuosi</h3>
            <div class="col-sm-11">
                <canvas id="chart1year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="5years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 5 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart5year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
        <div id="10years" class="tab-pane fade">
            <br />
            <br />
            <h3>Viimeiset 10 vuotta</h3>
            <div class="col-sm-11">
                <canvas id="chart10year" style="height:5vw;width:20vw"></canvas>
            </div>
        </div>
    </div>

    <div class="col-sm-12">
        <br />
        <p>
            <a class="btn btn-info" @Html.ActionLink("Takaisin", "Index")
        </p>
    </div>


</body>
</html>

<script type="text/javascript">
    //Get stock data from API(alphavantage)
    //Construct url
    var aStockData = 'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var cStockData = '&apikey=P3FY8FMGNJ4C88D6';
    var uStockData = [];
    function urlStockData() {
        uQuote = aStockData + b + cStockData
        //return uStockData
    }
    urlStockData();
    //console.log(uQuote)

    //Get data from url
    //const url1 = uQuote;
    async function getStockData() {

        // Storing response
        //const response = await fetch(url1);
        const response = await fetch(uQuote);

        // Storing data in JSON
        var data = await response.json();
        console.log(data);

        //Javascript destructuring
        var pvm = data["Global Quote"]["07. latest trading day"];
        var kurssiNyt = data["Global Quote"]["05. price"];
        var avaus = data["Global Quote"]["02. open"];
        var ylin = data["Global Quote"]["03. high"];
        var alin = data["Global Quote"]["04. low"];
        var edellinen = data["Global Quote"]["08. previous close"];
        var maara = data["Global Quote"]["06. volume"];
        var muutos = data["Global Quote"]["09. change"];
        var muutosprosentti = data["Global Quote"]["10. change percent"];

        document.getElementsByClassName('date').textContent = pvm;
        document.getElementById('currentPrice').textContent = kurssiNyt;
        document.getElementById('openingPrice').textContent = avaus;
        document.getElementById('highPrice').textContent = ylin;
        document.getElementById('lowPrice').textContent = alin;
        document.getElementById('volume').textContent = maara;
        document.getElementById('previousClose').textContent = edellinen;
        document.getElementById('change').textContent = muutos;
        document.getElementById('changepercent').textContent = muutosprosentti;
    }
    getStockData();
    //console.log(price);


    //Get company overview data (alphavantage)
    //Construct url
    var aOverview = 'https://www.alphavantage.co/query?function=OVERVIEW&symbol=';
    var b = '@Html.DisplayFor(model => model.Yritys)';
    var cOverview = '&apikey=P3FY8FMGNJ4C88D6';
    function urlAVCompanyData() {
        uCompanyOverview = aOverview + b + cOverview
        return uCompanyOverview
    }
    urlAVCompanyData();

    //Get data from url
    async function getCompanyData() {

        // Storing response
        const response = await fetch(uCompanyOverview);

        // Storing data in JSON
        var data = await response.json();
        //console.log(data);

        //Javascript destructuring
        const { Name, Exchange, Country, Currency, Sector, PERatio, PEGRatio, PriceToSalesRatioTTM, PriceToBookRatio, DividendPerShare, EPS } = data;
        document.getElementById('companyName').textContent = Name;
        document.getElementById('exchange').textContent = Exchange;
        document.getElementById('country').textContent = Country;
        document.getElementById('currency').textContent = Currency;
        document.getElementById('sector').textContent = Sector;
        document.getElementById('pe').textContent = PERatio;
        document.getElementById('peg').textContent = PEGRatio;
        document.getElementById('ps').textContent = PriceToSalesRatioTTM;
        document.getElementById('pb').textContent = PriceToBookRatio;
        document.getElementById('dividend').textContent = DividendPerShare;
        document.getElementById('eps').textContent = EPS;
    }
    getCompanyData();

    //<-- CHARTS -->
    //JSON data from alphavantage

        //Construct url (compact JSON)
        //TimeSeries DAILY
        var aCompanyData = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=';
        var b = '@Html.DisplayFor(model => model.Yritys)';
        var cCompanyData = '&outputsize=full&apikey=P3FY8FMGNJ4C88D6';
        function urlAVDaily() {
            uDaily = aCompanyData + b + cCompanyData
            return uDaily
        }
        urlAVDaily();

        //Get compact data from url - compact data used for one week and one month
        async function getDailyDataUrl() {
            // Storing response
            const response = await fetch(uDaily);
            // Storing data in JSON
            var data = await response.json();
            //console.log(data);
        }
        getDailyDataUrl();

        var dateList = [];
        var pricesList = [];
        var lastRefreshed = "";
    async function getDailyData() {
        const response = await fetch(uDaily);

        // Storing data in JSON
        var data = await response.json();
        //console.log(data);

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates = data['Time Series (Daily)'];
        for (var date in jsonDataDates) {
            dateList.push(date);
        }
        //console.log(dateList);

        //Collect closing prices JSON
        var jsonDataPrices = data['Time Series (Daily)'];
        for (var price in jsonDataPrices) {
            pricesList.push(jsonDataPrices[price]['4. close'])
        }
        //console.log(pricesList);

        //Get latest date from JSON (last refreshed)
        var lastRefreshed = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed);

        //<-- CREATE CHART FOR 1 WEEK -->

        //Offset date by one week (7days)
        var d = new Date();
        d.setDate(d.getDate() - 7);
        //console.log(d);

        //Convert date format to yyyy-MM-dd
        var dateFormattedWk = new Date(d);
        dateFormattedWk = [
            d.getFullYear(),
            ('0' + (d.getMonth() + 1)).slice(-2),
            ('0' + d.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormattedWk);

        //Get only last 7 days of data
        var startDateWk = dateFormattedWk;
        var endDateWk = lastRefreshed;
        var oneWeek = dateList.filter(function (obj) {
            return obj >= startDateWk && obj <= endDateWk;
        });
        //console.log(oneWeek);

        //Get last items from prices corresponding to days
        var numberOfDaysWk = 0;
        numberOfDaysWk = oneWeek.length;
        //console.log(numberOfDaysWk);

        //Get appropriate number of prices and reverse order of prices for chart (xsWeek)
        pricesList2 = [];
        pricesList2 = pricesList.reverse();
        var xsWeek = pricesList2.slice(Math.max(pricesList.length - numberOfDaysWk, 0));
        //console.log(xsWeek);

        //Reverse dates to correspond with prices on chart (ysWeek)
        var ysWeek = [];
        ysWeek = oneWeek.reverse();

        //Draw chart 1 WEEK with prices (xsWeek) and dates (ysWeek)
        function createChartWeek() {
            var ctx = document.getElementById('chart5days').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xsWeek,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysWeek,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartWeek();

        //<-- CREATE CHART FOR 1 MONTH -->
        //Using uDaily

        //Offset date by one month (30 days)
        var dMth = new Date();
        dMth.setDate(dMth.getDate() - 30);
        //Convert date format to yyyy-MM-dd
        var dateFormattedMth = new Date(dMth);
        dateFormattedMth = [
            dMth.getFullYear(),
            ('0' + (dMth.getMonth() + 1)).slice(-2),
            ('0' + dMth.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormattedMth);
        //Get only last 7 days of data
        var startDateMth = dateFormattedMth;
        var endDateMth = lastRefreshed;
        var oneMonth = dateList.filter(function (obj) {
            return obj >= startDateMth && obj <= endDateMth;
        });
        //console.log(oneMonth);
        //Get last items from prices corresponding to days
        var numberOfDaysMth = 0;
        numberOfDaysMth = oneMonth.length;
        //console.log(numberOfDaysMth);
        //Get appropriate nnumber of prices
        var xsMonth = pricesList.slice(Math.max(pricesList.length - numberOfDaysMth, 0));
        //console.log(xsMonth);

        //Reverse dates to correspond with prices on chart (ysWeek)
        var ysMonth = [];
        ysMonth = oneMonth.reverse();

        //Draw chart 1 MONTH with prices (xsMonth) and dates (ysMonth)
        function createChartMonth() {
            var ctx = document.getElementById('chart1month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xsMonth,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysMonth,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChartMonth();

        //<-- CREATE CHART FOR 6 MONTHS-->

        //Construct url (full JSON)
        @*var aFull = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=';
        var b = '@Html.DisplayFor(model => model.Yritys)';
        var cFull = '&outputsize=full&apikey=P3FY8FMGNJ4C88D6';
        function urlAVDailyFull() {
            uDailyFull = aFull + b + cFull
            return uDailyFull
        }
        urlAVDailyFull();*@

        //Get full data from url - compact data used for one week and one month
        async function getFullDailyDataUrl() {
            // Storing response
            const response6mth = await fetch(uDaily);
            // Storing data in JSON
            var data = await response6mth.json();
            //console.log(data);
        }
        getFullDailyDataUrl();
        //console.log(uDailyFull);

        var dateList6mth = [];
        var pricesList6mth = [];
        var lastRefreshed6mth = "";
        //async function getDailyData6mth() {
        //    const response6mth = await fetch(uDailyFull);
        //}

        // Storing data in JSON (compact)
        //var dataFull = await response6mth.json();
        //console.log(data);

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates6mth = data['Time Series (Daily)'];
        for (var date in jsonDataDates6mth) {
            dateList6mth.push(date);
        }
        //console.log(dateList6mth);

        //Collect closing prices JSON
        var jsonDataPrices6mth = data['Time Series (Daily)'];
        for (var price in jsonDataPrices6mth) {
            pricesList6mth.push(jsonDataPrices6mth[price]['4. close'])
            //pricesList.reverse();
        }
        //console.log(pricesList6mth);

        //Get latest date from JSON (last refreshed)
        lastRefreshed6mth = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed6mth);

        //<-- CREATE CHART FOR 6 MONTHS -->

        //Offset date by six months (180 days)
        var d6mth = new Date();
        d6mth.setDate(d6mth.getDate() - 180);
        //console.log(d);

        //Convert date format to yyyy-MM-dd
        var dateFormatted6mth = new Date(d6mth);
        dateFormatted6mth = [
            d6mth.getFullYear(),
            ('0' + (d6mth.getMonth() + 1)).slice(-2),
            ('0' + d6mth.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted6mth);

        //Get only last 180 days of data
        var startDate6mth = dateFormatted6mth;
        var endDate6mth = lastRefreshed;
        var sixMonths = dateList.filter(function (obj) {
            return obj >= startDate6mth && obj <= endDate6mth;
        });
        //console.log(sixMonths);

        //Get last items from prices corresponding to days
        var numberOfDays6mth = 0;
        numberOfDays6mth = sixMonths.length;
        //console.log(numberOfDays6mth);

        //Get appropriate number of prices and reverse order of prices for chart (xsWeek)
        let pricesList6mth2 = [];
        pricesList6mth2 = pricesList6mth.reverse();
        var xs6mth = pricesList6mth2.slice(Math.max(pricesList6mth.length - numberOfDays6mth, 0));
        //console.log(xs6mth);
        //Reverse dates to correspond with prices on chart (ysWeek)
        var ys6mth = [];
        ys6mth = sixMonths.reverse();

        //Draw chart 6 MONTHS with prices (xs6mth) and dates (ys6mth)
        function createChart6Months() {
            var ctx = document.getElementById('chart6month').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xs6mth,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys6mth,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart6Months();


        //<-- CREATE CHART FOR 1 YEAR-->
        var dateList1yr = [];
        var pricesList1yr = [];
        var lastRefreshed1yr = "";

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates1yr = data['Time Series (Daily)'];
        for (var date in jsonDataDates1yr) {
            dateList1yr.push(date);
        }
        //console.log(dateList1yr);

        //Collect closing prices JSON
        var jsonDataPrices1yr = data['Time Series (Daily)'];
        for (var price in jsonDataPrices1yr) {
            pricesList1yr.push(jsonDataPrices1yr[price]['4. close'])
        }
        //console.log(pricesList1yr);

        //Get latest date from JSON (last refreshed)
        lastRefreshed1yr = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed1yr);

        //Offset date by one year (365 days)
        var d1yr = new Date();
        d1yr.setDate(d1yr.getDate() - 365);
        //console.log(d1yr);

        //Convert date format to yyyy-MM-dd
        var dateFormatted1yr = new Date(d1yr);
        dateFormatted1yr = [
            d1yr.getFullYear(),
            ('0' + (d1yr.getMonth() + 1)).slice(-2),
            ('0' + d1yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted1yr);

        //Get last 365 days of data
        var startDate1yr = dateFormatted1yr;
        var endDate1yr = lastRefreshed1yr;
        var oneYear = dateList.filter(function (obj) {
            return obj >= startDate1yr && obj <= endDate1yr;
        });
        //console.log(oneYear);

        //Get datapoints from prices corresponding to days
        var numberOfDays1yr = 0;
        numberOfDays1yr = oneYear.length;
        //console.log(numberOfDays1yr);

        //Get appropriate number of prices and reverse order of prices for chart (xsYear)
        let pricesList1yr2 = [];
        pricesList1yr2 = pricesList1yr.reverse();
        var xsYear = pricesList1yr2.slice(Math.max(pricesList1yr.length - numberOfDays1yr, 0));
        //console.log(xsYear);

        //Reverse dates to correspond with prices on chart (ysYear)
        var ysYear = [];
        ysYear = oneYear.reverse();

        //Draw chart 1 YEAR with prices (xsYear) and dates (ysYear)
        function createChart1year() {
            var ctx = document.getElementById('chart1year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        data: xsYear,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ysYear,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart1year();

        //<-- CREATE CHART FOR 5 YEARS-->
        var dateList5yr = [];
        var pricesList5yr = [];
        var lastRefreshed5yr = "";

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates5yr = data['Time Series (Daily)'];
        for (var date in jsonDataDates5yr) {
            dateList5yr.push(date);
        }
        //console.log(dateList5yr);

        //Collect closing prices JSON
        var jsonDataPrices5yr = data['Time Series (Daily)'];
        for (var price in jsonDataPrices5yr) {
            pricesList5yr.push(jsonDataPrices5yr[price]['4. close'])
        }
        //console.log(pricesList5yr);

        //Get latest date from JSON (last refreshed)
        lastRefreshed5yr = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed5yr);

        //Offset date by five years (1825 days)
        var d5yr = new Date();
        d5yr.setDate(d5yr.getDate() - 1825);
        //console.log(d5yr);

        //Convert date format to yyyy-MM-dd
        var dateFormatted5yr = new Date(d5yr);
        dateFormatted5yr = [
            d5yr.getFullYear(),
            ('0' + (d5yr.getMonth() + 1)).slice(-2),
            ('0' + d5yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted5yr);

        //Get last 1825 days of data
        var startDate5yr = dateFormatted5yr;
        var endDate5yr = lastRefreshed5yr;
        var fiveYear = dateList5yr.filter(function (obj) {
            return obj >= startDate5yr && obj <= endDate5yr;
        });
        //console.log(fiveYear);

        //Get datapoints from prices corresponding to days
        var numberOfDays5yr = 0;
        numberOfDays5yr = fiveYear.length;
        //console.log(numberOfDays1yr);

        //Get appropriate number of prices and reverse order of prices for chart (xsYear)
        let pricesList5yr2 = [];
        pricesList5yr2 = pricesList5yr.reverse();
        var xs5Year = pricesList5yr2.slice(Math.max(pricesList5yr.length - numberOfDays5yr, 0));
        //console.log(xs5Year);

        //Reverse dates to correspond with prices on chart (ysYear)
        var ys5Year = [];
        ys5Year = fiveYear.reverse();

        //Draw chart 5 YEARS with prices (xsYear) and dates (ysYear)
        function createChart5year() {
            var ctx = document.getElementById('chart5year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xs5Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys5Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart5year();

        //<-- CREATE CHART FOR 10 YEARS-->
        var dateList10yr = [];
        var pricesList10yr = [];
        var lastRefreshed10yr = "";

        //Javascript destructuring
        //Collect dates from JSON
        var jsonDataDates10yr = data['Time Series (Daily)'];
        for (var date in jsonDataDates10yr) {
            dateList10yr.push(date);
        }
        //console.log(dateList10yr);

        //Collect closing prices JSON
        var jsonDataPrices10yr = data['Time Series (Daily)'];
        for (var price in jsonDataPrices10yr) {
            pricesList10yr.push(jsonDataPrices10yr[price]['4. close'])
        }
        //console.log(pricesList10yr);

        //Get latest date from JSON (last refreshed)
        lastRefreshed10yr = data['Meta Data']['3. Last Refreshed'];
        //console.log(lastRefreshed10yr);

        //Offset date by ten years (3650 days)
        var d10yr = new Date();
        d10yr.setDate(d10yr.getDate() - 3650);
        //console.log(d10yr);

        //Convert date format to yyyy-MM-dd
        var dateFormatted10yr = new Date(d10yr);
        dateFormatted10yr = [
            d10yr.getFullYear(),
            ('0' + (d10yr.getMonth() + 1)).slice(-2),
            ('0' + d10yr.getDate()).slice(-2)
        ].join('-');
        //console.log(dateFormatted10yr);

        //Get last 3650 days of data
        var startDate10yr = dateFormatted10yr;
        var endDate10yr = lastRefreshed5yr;
        var tenYear = dateList10yr.filter(function (obj) {
            return obj >= startDate10yr && obj <= endDate10yr;
        });
        //console.log(tenYear);

        //Get datapoints from prices corresponding to days
        var numberOfDays10yr = 0;
        numberOfDays10yr = tenYear.length;
        //console.log(numberOfDays10yr);

        //Get appropriate number of prices and reverse order of prices for chart (xsYear)
        let pricesList10yr2 = [];
        pricesList10yr2 = pricesList10yr.reverse();
        var xs10Year = pricesList10yr2.slice(Math.max(pricesList10yr.length - numberOfDays10yr, 0));
        //console.log(xs5Year);

        //Reverse dates to correspond with prices on chart (ysYear)
        var ys10Year = [];
        ys10Year = tenYear.reverse();

        //Draw chart 10 YEARS with prices (xs10Year) and dates (ys10Year)
        function createChart10year() {
            var ctx = document.getElementById('chart10year').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        //label: 'Closing price',
                        data: xs10Year,
                        pointRadius: 0,
                        fill: false,
                        borderColor: [
                            'rgba(0,0,225, 1)'
                        ],
                        borderWidth: 1,
                        order: 1,
                    }],
                    labels: ys10Year,
                },
                options: {
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                // Include a dollar sign with the ticks
                                callback: function (value) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        createChart10year();
    }







    ////Create chart - ALL
    //var xsAll = [];
    //var ysAll = [];
    //xsAll = pricesList.reverse();
    //ysAll = dateList.reverse();
    ////console.log(ysAll);
    //function createChartAll() {
    //    var ctx = document.getElementById('chartAll').getContext('2d');
    //    var myChart = new Chart(ctx, {
    //        type: 'line',
    //        data: {
    //            datasets: [{
    //                //label: 'Closing price',
    //                data: xsAll,
    //                fill: false,

    //                borderColor: [
    //                    'rgba(0,0,225, 1)'
    //                ],
    //                borderWidth: 1,
    //                order: 1,
    //            }],
    //            labels: ysAll,
    //        },
    //        options: {
    //            scales: {
    //                yAxes: [{
    //                    ticks: {
    //                        // Include a dollar sign with the ticks
    //                        callback: function (value) {
    //                            return '$' + value;
    //                        }
    //                    }
    //                }]
    //            }
    //        }
    //    });
    //};
    //createChartAll();
    getDailyData();
</script>
